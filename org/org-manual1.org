* 介绍

** 摘要            

   Org是一种通过纯文本方式来快速而有效地记录笔记,处理待办列表,做项目计划的mode.
   
   Org通过一些NOTE文件来组织任务,这些NOTE文件用纯文本的方式包含了一些列的项目信息. Org是建立在Outline mode的基础之上的,Outline mode能够很好地组织大型文件的内容. 你可以使用可视的循环和结构编辑功能来帮助你编辑大纲树结构. 通过使用内置的表格编辑器,你也可以很容易地创建出一个表格. Org可以管理代办列表,设置最后期限,加时间戳,制定规划. 它动态的把这些东西显示在一个agenda中,在这个agenda中很好地集成了Emacs calendar和diary功能. 你可以用纯文本的方式记录各种类URL的连接,这些连接可以链接到网站,email,Usenet消息,BBDB(The insidious Big Brother Database)条目,和任何与项目有关的文件. 如果你想打印和分享这些记录,你可以把org导出为结构化的ASCII文件,比如HTML,或者iCalendar文件(仅限于TODO和日程条目). 它也可以作为发布工具,为一堆的相互链接的网页提供发布服务.

   作为一个项目计划的环境,Org通过为大纲节点增加元数据的方式工作. 正是基于这些元数据,我们可以通过查询抽取特定的记录并且动态地创建agenda视图.

   Org模式中也可以包含其他非org环境,这些环境运行你编辑文件中的内嵌源代码,更便利地执行代码,记录文档,进行文学化编程.

   通过激活Orgtbl mode,任何major mode都能拥有Org的表格编辑功能,这些表格编辑功能不仅自动化,上下文敏感,而且具有电子表格(spreadsheet)的运算能力. 通过一个转换步骤,就可以用它来包含一个表格到任意文件类型中(比如LaTeX). 通过minor Orgstruct mode,可以在非Org mode中使用Org的结构编辑和列表创建功能.

   Org保持简单的事情简单化. 当第一次使用它时,感觉它就是个简单易用的大纲编辑器. 它不强加给你复杂性,但是当你需要的时候,却会发现有大量的功能可以使用. Org就是一个工具盒,你可以为了不同的目的,通过的不同的途径来使用它,例如你可以把它看成是:

     + 一个具有可见性的转换和结构编辑能力的outline mode扩展
     + 一个记录结构化记录的ASCII系统和表格编辑器
     + 一个TODO列表的编辑器
     + 一个完整的日程表和计划规划工具,你可以设定工作的最后截止日期和规划执行日期.
     + 一个GTD系统
     + 一个简单的超文本系统,可以导出HTML和LaTeX格式的文件
     + 一个发布工具,可以用来创建一套相互链接的网页
     + 一个进行文学化编程的环境

   有一个网站提供了最新版本的Org连接,还有附加信息,FAQ,和入门指导.这个网页就是http://orgmode.org

** 安装            

   最近Org已经包含在最新版的GUN Emacs发行版内,通常你不需要下载,如果你需要安装的话,可以使用以下三种方法之一:
      + 使用Emacs的package管理系统
      + 下载Org的档案包
      + 使用Org的git库
   建议只采用一种方法安装.

   * 使用Emacs的Package管理系统

   最新的Emacs发行版包含Package管理系统,你可以使用 /M-x package-install RET org/ 安装最新版的Org

   *注意*:你在安装时不要打开.org文件,就是说不能打开Org的功能,否则自动加载的Org功能会阻止这个安装.

   然后要保证你的Org配置是有效的,在使用Org选项之前应该在Emacs配置文件内使用(package-initialize)初始化Package管理系统,如果要使用Org的包仓库,请参考[[http://orgmode.org/elpa.html][org ELPA页面]].

   * 以档案包的方式下载Org

   你可以在[[http:orgmode.org][Org官方网站]] 下载最新版的Org.这种方式,请确认在Emacs的配置文件内设置了正确的加载路径.
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/path/to/orgdir/lisp")
   #+END_SRC
   下载的共用包没有包含在Emacs内,如果你想使用这些包请将contrib目录加到你的加载路径内.
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/path/to/orgdir/contrib/lisp" t)
   #+END_SRC
   可选项,你可以选择是否编译这些下载的包.

   
   * 使用Org的git仓库安装

   使用下面的命令克隆Org的仓库
   #+BEGIN_SRC sh
   $ cd ~/src/
   $ git clone git://orgmode.org/org-mode.git
   $ make autoloads
   #+END_SRC
   *注意*:在这里make autoloads是强制执行的,因为它在org-version.el定义了Org的版本和org-loaddefs.el内定义了Org的自动加载.
   请确认在Emacs的配置文件内设置了正确的加载路径   
   你也可以使用make命令编译,详细的编译方法请参考[[http://orgmode.org/worg/dev/org-build-system.html][Worg]].

** 激活            

   Org模式需要打开font-lock模式:在Emacs里默认为打开状态[fn:介绍1]

   Org模式与其它的Elisp包有些兼容问题,请花点时间检查一下这个清单[Conflicts][冲突]   

   有4个Org命令应该定义全局的快捷键(也就是说作用于在Emacs的任何地方,而不仅仅是Org缓存区),这四个org命令为'org-store-link','org-capture','org-agenda'和'org-iswitchb'. 下面是建议的绑定键设置,你可以按照自己喜欢的来修改键配置

   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
   #+END_SRC

   所有后缀为'.org'的文件在打开时会直接进入Org-mode. 如果你想不这么配置,作为替代,把下面这句放到文件的一行也可以.

   #+BEGIN_SRC org
     MY PROJECTS    -*- mode: org; -*-
   #+END_SRC

   这样,不管文件名是什么,在打开时都会进去Org-mode. 参考变量'org-insert-mode-line-in-empty-file'.

   很多Org命令在选定文本块时会对文本块进行操作. 为了保证该特性被启用,你需要开启'transient-mark-mode',Emacs默认打开此选项.如果你不想使用transient-mark-mode,你可以通过鼠标选择一个区域,以这种方式来建立一个选定的文本块,或者在一定光标之前安两下'C-<SPC>'

** 反馈            

   如果你发现了Org有问题,或者你有疑问,建议和好的想法,请发邮件到Org的mailing list [[mailto:emacs-orgmode@gnu.org]]. 如果你还不是这个mailing list的会员, 那么在版主批准之后,你的mail会被加入到mailing list中[fn:介绍2]. 

   如果你想报告BUG,请首先在最新版本的Org上复现这个BUG--如果你允许一个老旧版本的Org,很可能这个Bug已经被修复了. 如果依旧有问题,请写好报告并提供尽可能多的信息,包括Emacs的版本信息(用M-x emacs-version <RET>)和Org的版本信息(用M-x org-version <RET>),以及'.emacs'中Org的相关配置. 最简单的提交报告的方法就是执行命令'M-x org-submit-bug-report'. 这个命令会收集所有必要的信息并放到一个Emacs的mail缓存区中,这样你只需要添加你自己的描述就可以了. 如果你不会在Emacs中发送email,请拷贝这些内容并粘贴到自己常用的Email程序中.

   有时候你面对的错误可能是由于Emacs或Org-mode配置错了. 在报告BUG之前,最后以最小客户化的形式启动Emacs然后复现这个BUG. 这样做常常能够帮助你确定这个问题是因为配置的关系还是Org-mode本身有问题. 你可以用下面这个命令来开启一个最低客户化的session

   #+BEGIN_SRC sh
     emacs -Q -l /path/to/minimal-org.el
   #+END_SRC
   
   如果你使用的是Emacs中自带的Org mode,那么上面哪个最小客户化的配置就没有必要了. 你可以直接用'emacs -Q'来打开Emacs. 一个典型的'minimal-org.el'配置文件可能包含如下内容

   #+BEGIN_SRC emacs-lisp
     ;;; Minimal setup to load latest `org-mode'
     
     ;; activate debugging
     (setq debug-on-error t
           debug-on-signal nil
           debug-on-quit nil)
     
     ;; add latest org-mode to load path
     (add-to-list 'load-path (expand-file-name "/path/to/org-mode/lisp"))
     (add-to-list 'load-path (expand-file-name "/path/to/org-mode/contrib/lisp"))
     
   #+END_SRC

   如果有错误发生,一个错误的跟踪栈对查找问题很有帮助(下面说明了如何创建一个跟踪栈). 通常提供一个简单的造成错误的简单例子会很有帮助, 再加上以下这些信息:
   1. 你做了什么
   2. 你希望的结果是什么
   3. 实际上的结果是什么
   
   感谢您帮助我们改进这个程序.

   * 如何创建一个有用的跟踪栈

   如果Org报出了一个i额你不明白的出错信息,你可能发现了BUG. 报告这个BUG的最好方法是提供一个跟踪栈(backtrace). 跟踪栈使用内置的调试信息来收集一些信息,这些信息包括错误发生的地点和方式. 下面是提供一个有用跟踪栈的步骤

   1. 重新加载未编译的所有Org mode的Lisp源文件. 如果错误是在未编译的脚本中产生时,跟踪栈能够提供多得多的信息. 要做到这一步,执行

     C-u M-x org-reload RET

     或者在Emacs菜单上选择'Org -> Refresh/Reload -> Reload Org uncompiled'
   2. 在'Options'菜单中选择'Enter Debugger On error'(如果是使用XEmacs,需要在'Troubleshooting'子菜单中选择此项).
   3. 复现错误,别忘了记录操作的每个步骤
   4. 当错误产生了,一个名为*Backtrace*的缓存区会显示出来,保存这个缓存区到文件中(一般是用C-x C-w命令)然后附加在你的错误报告中.

** 手册中的排版约定  

   * TODO关键字,标签,属性等
   Org使用三种类型的关键字:TODO关键字,标签和属性名称. 在该手册中我们使用如下约定:
   #+BEGIN_SRC org
   TODO
   WAITING    TODO关键字全部大写,即使它们是用户自定义的.
   #+END_SRC
   
   #+BEGIN_SRC org
   boss
   ARCHIVE    用户自定义的标签使用全小写;内置的标签具有特定的意义,使用全大写形式
   #+END_SRC
   
   #+BEGIN_SRC org
   Release
   PRIORITY    用户自定义的属性使用首字母大写;内置属性有特定意义的,使用全大写形式.
   #+END_SRC
   
   此外,Org使用选项关键字(比如使用 #+TITLE 定义标题)和环境关键字(比如 #+BEGIN_EXPORT html 设定 HTML 导出环境).在本手册内为了可读性使用了全大写,你可以在您的Org文件内使用小写.

   * 按键绑定和命令
      
   该手册列出特定功能的键序列和相应的命令. Org mode经常使用相同的键序列来在不同的上下文中触发不同的功能. 绑定到这些键序列的命令都有一个通用的名称,比如'org-metaright'. 在该手册中,我们会尽可能的给出通用命令内部调用的函数名称. 例如,在文件结构的章节上按下'M-<right>'会被指明调用的是'org-do-demote'程序,而在表标题上按下相同的键序列时,我们会指明调用的是'org-table-move-column-right'.你可以编译这份手册使之不带有命令名称,方法是在'org.texi'中取出'cmdnames'标志.
* 文档结构
  Org是基于Outline-mode的,它提供了大量的命令来编辑文档的结构.

** 大纲                  

   Org的实现是基于Outline-mode的.Outline运行文档按照分级结构的方式来组织,这种方式(至少对于我来说)是用来展示记录和想法的最佳方式.通过折叠(隐藏)绝大部分的文档内容而只显示文档的大致结构和正在编辑的这一部分内容,一个文档结构的总览被完美地展示出来. Org极大地简化了对大纲的操作,它把整个显示/隐藏功能都通过一个命令来完成:'org-cycle',这个命令被绑定到了<TAB>键上.

** 标题                  

   标题定义了大纲树的结构. Org的标题以一个或多个星号开头,向左对齐[fn:文档结构1][fn:文档结构2]. 例如:

   #+BEGIN_SRC org
     * Top level headline
     ** Second level
     *** 3rd level
         some text
     *** 3rd level
         more text
     
     * Another top level headline
   #+END_SRC

   注意:在org-footnote-section后面的标题名属于‘Footnotes’,此标题的子树在导出时将被忽略.

   有些人觉得太多的星号眼花缭乱,它们可能更喜欢Outline-mode使用空格加星号的格式作为标题的开始标识.[Clean view][一个更简洁的大纲显示]中描述了如何配置.

   在子树的末尾的空行,被认为是子树的一部分,它会随着子树的折叠而被隐藏. 然而,如果你放了两个空行,那么在折叠这个子树的时候,还会有一个空行是可见的,这样做的目的常常是为了构造分割的视图. 要改变这种行为,需要配置变量'org-cycle-separator-lines'

** 可见性的转换           

*** 全局和局部循环
   Outline使得隐藏缓存区中的一部分文本成为可能. Org仅仅使用两个命令来切换缓存区的可见性,这两个命令被绑定到了'<TAB>'和'S-<TAB>'上.
   * <TAB> (org-cycle) :: 子树循环:以下面的循环状态来切换当前子树的状态
	#+BEGIN_EXAMPLE
	,-> FOLDED -> CHILDREN -> SUBTREE --.
	'-----------------------------------'
	#+END_EXAMPLE
	为了执行子树的切换,光标位置必须在子树的标题上[fn:文档结构3]. 若光标在缓存区的最前端,而这第一行又不是标题,那么<TAB>实际上执行的是'全局循环'(具体情况见下文)[fn:文档结构4]. 同样的,如果使用的是带前缀参数的<TAB>(C-u <TAB>),调用的也是'全局循环'
   * S-<TAB> 或 C-u <TAB> (org-global-cycle) :: 全局循环:使整个缓存区在在不同状态间切换
	#+BEGIN_EXAMPLE
	,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
	'--------------------------------------'
	#+END_EXAMPLE
	若再S-<TAB>前加了一个数字前缀N,那么CPMTEMTS一直到第N个层次的内容都会显示出来. 需要注意的是,若是在编辑表格中,S-<TAB>的作用是跳到上一个字段.
   * C-u C-u <TAB> (org-set-startup-visiblity) :: 
	切换当前buffer返回到初始可见状态(参考[[%E5%88%9D%E5%A7%8B%E5%8F%AF%E8%A7%81%E6%80%A7][初始可见性]])
   * C-u C-u C-u <TAB> (outline-show-all) ::
        显示所有信息,包括'抽屉'内的信息 
   * C-c C-r (org-reveal) :: 
	显示光标周围的上下文,也就是显示当前条目,以及所有上层标题.对于被[[稀疏树][稀疏树]]命令筛选的条目附近或[[Agenda buffer命令][Agenda buffer命令]]非常有用. With a prefix argument show, on each level, all sibling headings. With a double prefix argument, also show the entire subtree of the parent. (TODO 真没看懂什么意思,在实验C-c C-r的时候我的Org居然没反应...)
   * C-c C-k (outline-show-branches) :: 
	展开所有子树的标题,如果只有一个子树,那么内容也显示出来.
   * C-c <TAB> (outline-show-children) ::
        Expose all direct children of the subtree. With a numeric prefix argument N,expose all children down to level N. 
   * C-c C-x b (org-tree-to-indirect-buffer) :: 
	把当前子树显示在indirect buffer中[fn:文档结构5]. 如果加了一个前缀参数N,它会向下进入地N层子树并在indirect buffer中显示该子树. 如果N是负数,那么就是向上进入N层的父节点. 如果命令执行前加了C-u前缀,则打开新的indirect buffer,而不会关闭之前打开的indirect buffer.
   * C-c C-x v (org-copy-visible) :: 
	拷贝文本块中的可见文本到kill ring中

*** 初始可见性	
   当Emacs第一次打开一个Org文件时,全局状态为OVERVIEW,也就是说,只有顶层的标题是可见的[fn:文档结构6]. 这个行为可以通过配置'org-startup-folded'变量来改变.或者可以在文件的任何地方添加下面所列出的任何一句,Emacs就会根据这句配置信息自动设置初始的状态.
   #+BEGIN_SRC org
     ,#+STARTUP: overview
     ,#+STARTUP: content
     ,#+STARTUP: showall
     ,#+STARTUP: showeverything
   #+END_SRC

   此外,任何带有'VISIBILITY'属性名的条目(参考[[属性和列][属性和列]])会相应地按照该属性值来设置可见性. 该属性的有效值可以使'folded','children','cotent'和'all'
   * C-u C-u <TAB> (org-set-startup-visiblity) ::
     重置该buffer的可见性为该buffer在启动时的可见性,也就是说根据buffer的'startup'选项和各个单独条目的'VISIBILITY'属性来重新设置整个buffer的可见性.
*** 捕捉隐藏的编辑
   有时你可能无意的编辑了隐藏的内容,造成不知道什么内容被编辑了以及如果恢复.设置org-catch-invisible-edits变量为non-nil避免发生此问题.

** 移动                  

   下面的命令跳转到buffer中的其他标题
   * C-c C-n (org-next-visible-heading) ::
     下一个标题
   * C-c C-p (org-previous-visible-heading) :: 
	上一个标题
   * C-c C-f (org-forward-same-level) :: 
	同一级的下一个标题
   * C-c C-b (org-backward-same-level) :: 
	同一级的上一个标题
   * C-c C-u (outline-up-heading) :: 
	回到上一级标题
   * C-c C-j (org-goto) :: 
	跳转到其他位置的同时不改变当前大纲的可见性. 在一个临时buffer中显示文档的结构,在这个临时buffer中你可以使用下面的快捷键来定位:
	#+BEGIN_EXAMPLE
	<TAB>           切换可见性
	<down> / <up>   下一个/上一个可见的标题
	<RET>           选定当前位置
	/               在树中作一个匹配查询
	如果你关掉了org-goto-auto-isearch选项,下面这些快捷键才可用
	n / p           下一个/上一个可见的标题
	f / b           同级别的上一个/下一个标题
	u               回到上一级标题
	0-9             数字参数
	q               退出这个临时buffer
	#+END_EXAMPLE
	参考变量'org-goto-interface'

** 结构编辑               

   * M-<RET> (org-insert-heading) ::
        插入一个与当前位置同级别的新标题. 如果此命令被用于一个行首,并且光标处有一个标题或列表项(参考[[%E5%88%97%E8%A1%A8][列表]]),将在当前行之前创建新的标题或列表项.当用于一个普通行首时,此行将转换为标题.
        如果在一行的中间执行这个命令,那么这一行会被分割成两行,光标到行尾的内容会成为新的标题名列表项,如果不想分割行,请定义org-M-RET-may-split-line变量. 如果实在一个标题的开头执行这个命令,那么新标题会天骄到当前行的前面. 如果是在所有行的前面执行这个命令,那么就创建了一个新的文件头. 如果是在折叠起来的子树末尾使用这个命令(也就是说,是在标题末尾的省略号之后),那么与当前标题类似的标题会被插入到这个子树的末尾.
        使用带有C-u前缀的命令时,将无条件的在当前树后面创建一个新标题,同时保留其内容.使用带有两个C-u C-u前缀的命令,将在父树的结尾创建一个标题.
   * C-<RET> (org-insert-heading-respect-content) :: 
	在当前树的结尾插入新标题.
   * M-S-<RET> (org-insert-todo-heading) :: 
	插入一个与当前标题同级别的TODO事项. 参考变量'org-treat-insert-todo-heading-as-state-change'
   * C-S-<RET> (org-insert-todo-heading-respect-content) :: 
	插入一个与当前标题同级别的TODO事项, 与C-<RET>类似,新的标题会插在当前子树的后面.
   * <TAB> (org-cycle) :: 
	在一个未输入内容的标题上,第一次按<TAB>,这个标题成为了上一个标题的子标题,再按一下<TAB>,这个标题的级别变成了上一个标题的父标题,然后每按一次<TAB>级别就上升一级,一直到最高级.到了最高级再按一次<TAB>,又会回到初始的级别.
   * M-<left> (org-do-promote) :: 
	提升当前标题一级
   * M-<right> (org-do-demote) :: 
	降低当前标题一级
   * M-S-<left> (org-promote-subtree) :: 
	提升当前子树一级
   * M-S-<right> (org-demote-subtree) :: 
	降低当前子树一级
   * M-S-<up> (org-move-subtree-up) ::
        上移当前子树(与同级别的上一个子树交换位置)
   * M-S-<down> (org-move-subtree-down) ::
        下移当前子树(与同级别的下一个子树交换位置)
   * M-h (org-mark-element) ::
        选择光标位置的元素.连续使用时将会选择当前选择部分后面的元素.例如:在一个段落上使用M-h,将选择此段落,连续使用M-h将选择下一个段落.
   * C-c @ (org-mark-subtree) :: 
        选择光标位置的子树,连续使用M-h将按顺序选择下面相同级别的子树.
   * C-c C-x C-w (org-cut-subtree) :: 
	剪切当前子树,也就是说把当前子树从buffer移到kill ring中. 加一个前缀参数N,会剪切N个连续的子树.
   * C-c C-x M-w (org-copy-subtree) :: 
	把当前子树拷贝入kill ring中, 加上一个前缀参数N,会拷贝N个连续子树
   * C-c C-x C-y (org-paste-subtree) :: 
	从kill ring中粘贴子树. 该操作会自动更改被粘贴子树的级别以便它能够使用粘贴的位置. 你也可用在粘贴时就指定好级别,方法有两个,一个是在粘贴命令前加一个数字前置参数,第二种方法是在已经标示好的标题(比如'****')后粘贴子树.
   * C-y (org-yank) :: 
	根据变量'org-yank-adjusted-subtrees'和'org-yank-folded-subtrees'的值,org-yank可用很智能地用与命令C-c C-x C-y一样的方式来粘贴折叠起来的子树. 在缺省的配置中,org-yank不会调整级别,并且除非会把原先可见的文本折叠起来,否则被粘贴的子树会子的那个被折叠起来. 任何前缀参数会让这个命令强制执行一个带着前缀参数的普通的yank操作. 要强制执行普通yank的一个好方法是按下C-u C-y. 如果在yank之后,你紧接着执行yank-pop命令,就会yank当前kill-ring前一个的内容,而且不会作调整和折叠动作.
   * C-c C-x c (org-clone-subtree-with-time-shift) :: 
	拷贝一堆的同级副本. 你可以一次性拷贝多个同级副本,并且你若拷贝的条目中含有时间戳信息的化,你还可以定义时间戳信息如何变化. 这项功能十分有用,例如,当你要分配任务来准备一系列的课程时. 更多细节参考命令'org-clone-subtree-with-time-shift'的文档字符串.
   * C-c C-w (org-refile) :: 
	转存指定条目或文本块到另一个地方.参考章节[[Refile and copy][Refile and copy]].
   * C-c ^ (org-sort-entries-or-items) :: 
	对同级条目进行排序. 如果选择了一块文本块,所有文本块中的条目都会被排序. 否则当前标题下的子节点进行排序. 该命令会提示你选择排序的方法,可选择的方法有按字母顺序排序,按数字顺序排序,按时间排序(创建时间,规划时间,最后期限),按优先级排序,按TODO的关键字排序(需预先在配置中定义好关键字的排序顺序),按属性值排序. 你也可以采取逆排序的方式排序. 你甚至可以提供自己的函数来对其他的关键字进行排序. 如果加了C-u前缀,排序是大小写敏感的.
   * C-x n s (org-narrow-to-subtree) :: 
	缩减buffer只显示当前的子树的内容
   * C-x n b (org-narrow-to-block) ::
        缩减buffer只显示当前块的内容
   * C-x n w (widen) :: 
	回复被缩减的buffer
   * C-c * (org-toggle-heading) :: 
	该命令把正文转变为一个标题(正文在它的位置成为上一个标题的一个子标题). 也会把一个标题转变为正文. 如果选择了一个文本块,那么文本块中的所有行都变成标题. 如果该文本块中第一行是一个item(什么意思??),那么只把这个item转换为标题. 最后,如果文本块中第一行是一个i额标题,那么该文本块中所有的标题都变成正文.
   当对一个选定的文本块(Transient Mark mode)作升级/降级操作时,会影响到文本块中所有的标题.  要选择一个包含很多标题的文本块,最好是把point和mark都放在行首,mark放在第一个标题的行首,point放在要改变的最后哪个标题的下一行的行首. 需要注意的是,如果光标在表格内部(参考[[表格][表格]]). Meta-光标键的操作有不同的作用.
        
** 稀疏树              

   Org-mode的一个很重要的功能是它可以根据一系列的条件,将一棵大纲树中所匹配出来的一部分形成一棵稀疏树,也就是说,整个文档都会尽可能的折叠起来,唯独所匹配的信息和上级标题是可见的[fn:文档结构7]. 你只要尝试以下,就立刻能够明白它是怎么工作的. 

   Org-mode有很多命令可以创建Sparse树,所有这些命令都可以通过dispatcher来触发.

   * C-c / (org-sparse-tree) ::
        它会提示你输入一个额外的快捷键来选择特定的sparse树的创建命令
   * C-c / r或C-c / / (org-occur) :: 
	提示输入一个正则表达式,然后显示所有匹配的sparse树. 如果有标题匹配,那么只有这个标题可见. 如果是正文匹配,那么标题和正文同时可见. 为了提供最低限度的上下文信息,所有上层标题和紧跟者匹配部分的标题都会被显示. 每个匹配的部分都被高亮; 若这是你对文档进行编辑动作,则高亮会消失[fn:文档结构8]. 同样你也可以通过C-c C-c来取消高亮. 如果执行带有C-u前缀时则以前匹配的高亮会被高持,这样多次调用这个命令的结果就被保存了下来.
   * M-g n 或者 M-g M-n (next-error) :: 
	跳到当前buffer中匹配的下一个sparse树
   * M-g p 或者 M-g M-p (previous-error) :: 
	跳到当前buffer中匹配的上一个sparse树

   对于那些常用的sparse树查询,你可以在变量'org-agenda-custom-commands'中定义快捷键,直接执行这些稀疏树查询. 然后就可以在agenda dispatcher中使用这些快捷键来快速查询了([[Agenda调度器][Agenda调度器]]).例如
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-custom-commands
           '(("f" occur-tree "FIXME")))
   #+END_SRC
   会定义一个键序列为'C-c a f'的快捷方式,这个快捷方式会通过匹配字符串'FIXME'来创建稀疏树.

   其他的稀疏树命令例如通过TODO关键字,标签或者属性来查找会在手册后一点的位置提到.

   要打印出sparse树,你可以使用emacs命令'ps-print-buffer-with-faces',这个命令不会把不可见部分给打印出来. 或者你可以用命令'C-c C-e v'把可视化的部分导出到文档中,然后打印导出文档.

** 列表

   在大纲树的正文内容中,手工排列好的列表被认为是带有一定结构的. Org提供了一种方式来创建带复选框的列表(参考[[复选框][复选框]]),它提供工具来编辑这种列表,并且在导出时(参考章节[[导出][导出]])能够解析并且格式化这些列表.

   Org支持有序列表,无序列表和描述列表
   * 无序列表,以'-','+'或者'*'[fn:文档结构9]开头
   * 有序列表以数字开头,后接句号或者右括[fn:文档结构10](像这样"1.","1)")[fn:文档结构11]. 如果你想让列表以其他值作为初始值开始计数,需要以类似[@20]这样的文本开头[fn:文档结构12]. 这样的用法可以用在列表的任何一项上(而不需要仅仅是第一项),以强制从指定数字顺序开始.
   * 描述列表是一种无序列表,它包含'::'作为分隔符来分割术语和描述.
     
   同一个列表中的列表项必须有相同的缩进. 尤其当一个有序列表的计数达到了'10'的时候,那么这两位的计数必须与列表中的其他计数左对齐. (一个列表项可以是多行的.)当一个列表项的下一行的缩进与该列表项本身的缩进相等甚至跟少时,才表示该列表项结束了.

   当所有的列表项结束时,一个列表才被认为是结束了的,这意味在有一行的缩进等于或者小于列表第一项的缩进前,该列表都没有结束. 当然,你也可以用两个空白行[fn:文档结构13]来强制结束列表. 这种情况下,所有的列表项都被关闭了.下面是一个例子.
   #+BEGIN_SRC org
     ** Lord of the Rings
        My favorite scenes are (in this order)
        1. The attack of the Rohirrim
        2. Eowyn's fight with the witch king
           + this was already my favorite scene in the book
           + I really like Miranda Otto.
        3. Peter Jackson being shot by Legolas
           - on DVD only
           He makes a really funny face when it happens.
        But in the end, no individual scenes matter but the film as a whole.
        Important actors in this film are:
        - Elijah Wood :: He plays Frodo
        - Sean Austin :: He plays Sam, Frodo's friend.  I still remember
          him very well from his role as Mikey Walsh in The Goonies.   
   #+END_SRC

   Org能正确地对这些列表进行filling和warpping调整, 而且能够以一种恰当的方式导出这些列表(参考[[导出][导出]]). 由于缩进决定了这些列表的结构,许多像#+BEGIN_...这样的block可以通过缩进来表明它们是属于哪一个列表项的一部分的.

   如果你觉得为子列表使用不同的标示(而不使用当前列表项的标示)可以增加可读性,你可以自定义变量'org-list-demote-modify-bullet'. 如果你想改变缩进程度,自定义变量'org-list-indent-offset'

   当光标处于某列表项的第一行(即带有列表项标示的那一行),可以用下面这些命令来对列表项进行操作. 其中有些命令暗含某些规则来保证列表结构是正确的. 如果你想让这些命令妨碍了你,可以通过配置'org-list-automatic-rule'来禁用其中的某些命令.
   * <TAB> (org-cycle) ::
        列表项可以像标题一样具有折叠的功能. 正常情况下,只有当光标处在plain list item上时才能进行这种折叠操作. 欲了解更多的细节,请看变量'org-cycle-include-plain-lists'. 如果该变量的值为'integrate'. plain list items会被当成是低层次的标题看待. 而*号和数字缩进层次则决定了把它当成几级标题来看待. 列表项的等级总是要低于真正的标题, 然而列表的等级制度与标题的等级制度是完全分开的. 在一个新的还未写内容的列表项上,第一次按<TAB>会把它变成上一个列表项的子项.再按一次<TAB>会上升一个层级,并且下去直到最顶列表项的层级,再按一次则返回最原始的层级位置.
   * M-<RET> (org-insert-heading) :: 
	插入新列表项到当前层级. 若在前面加了前缀参数,则强制插入的是标题(参考[[%E7%BB%93%E6%9E%84%E7%BC%96%E8%BE%91][结构编辑]]). 如果在一个列表项的中间位置执行这条命令,这个列表项会被分为2部分,而第二部分则变成了一个新的列表项[fn:文档结构14]. 如果在列表项的内容前执行这个命令,则新列表项插入在当前列表项前.
   * M-S-RET :: 
	插入带复选框的列表项(见[[复选框][复选框]])
   * S-up 或 S-down :: 
	跳转到当前列表的上一个/下一个列表项上去[fn:文档结构15],不过该命令只有在'org-support-shift-select'被关闭的情况下才能用. 如果不是的话,你可以使用段落跳转命令代替,快捷键为C-<up>和C-<down>
   * M-up 或 M-down :: 
	向上或者向下移动列表项及其子项[fn:文档结构16](与上一个/下一个同缩进的列表项交换). 如果列表是有序列表,会自动重新计算序号.
   * M-left 或 M-right ::
        仅增加或减少项目的缩进量,留其下面的内容. 
   * M-S-left 或 M-S-right ::
        减少或增加项目(包括其子项)的缩进. 在第一次开始改变缩进时Org就会记住缩进的范围,并且在以后的多次缩进中都以次范围为准进行缩进,即使在缩进过程中可能会形成新的继承体系也不管. 如果你想在新的继承体系上进行缩进,那么你可以移动以下光标或者其他方法来先中端命令链,重新开始新的缩进过程.

        作为一种特殊的情况,在列表的第一个列表项上用这个命令会移动整个列表. 你可以通过配置'org-list-automatic-rules'来禁止这种行为. 一个列表的总体缩进对列表后面的文本并无影响力(什么意思??)
   * C-c C-c :: 
	如果所在的列表项是带复选框的(参考[[复选框][复选框]]),那么就会转换复选框的状态. 在任何情况下,该命令都会校验整个列表序号和缩进的一致性.
   * C-c - :: 
        循环更改整个列表的列表项标志(对于无需列表:'-','+','*';对于有序列表:"1.","1)"),更改的具体方式依据'org-plain-list-ordered-item-terminator',列表的类型和列表项的位置. 如果加了一个数字前缀N,就会选择中第N个标识作为列表项的标识. 如果在调用该命令时选择了一个文本块,那么整个文本块会转换成一个列表项. 如果加了前缀参数,那么文本块中所有的行各自转换成为列表项. 如果第一行依据是一个列表项,那么文本块中所有的列表项标识都被删除. 最后,即使没有选择文本块,一个普通的文本行也会转换成列表项.
   * C-c * :: 
	把一个普通列表转换为标题(这样它就原地转换为了一个子标题). 更详细的扩展参考[[%E7%BB%93%E6%9E%84%E7%BC%96%E8%BE%91][结构编辑]].

   * C-c C-c * :: 
	把整个列表转换成当前标题下的子树. 带复选框的列表项(参考[[复选框][复选框]])会转换成TODO(复选框没被选上)或者DONE(复选框被选上)关键字.
   * S-left 或 S-right :: 
	当光标处于列表项的任意位置上时,这个命令也会起到循环转换列表项标志的作用. 具体怎么转换依赖于'org-support-shift-select'
   * C-c ^ :: 
	对列表进行排序. 你会被提示输入排序方法,有按数字排序,按字符排序,按时间排序或自定义方法排序.
** 抽屉

   有时候你想记录下一项事务的某些信息,但是这些信息在一般情况下是没必要显示出来的. 为了实现这个目的,Org mode提供了抽屉功能.抽屉看起来就像这样:
   #+BEGIN_SRC org
     ** This is a headline
        Still outside the drawer
        :DRAWERNAME:
        This is inside the drawer.
        :END:
        After the drawer.
   #+END_SRC

   你可以在光标处调用org-insert-drawer插入一个抽屉,快捷键为C-c C-x d,在已选择的区域上使用此命令会将此选择放入到抽屉内.使用带有前缀参数的命令,会调用org-insert-property-drawer命令,在当前标题下增加一个属性抽屉.
   在标题上切换可见性时(参考[[%E5%8F%AF%E8%A7%81%E6%80%A7%E7%9A%84%E8%BD%AC%E6%8D%A2][可见性的转换]]),抽屉一直都显示为折叠状态. 要显示抽屉的内容,你需要移动光标到抽屉这一行,然后按<TAB>键. Org-mode使用名为'PROPERTIES'的抽屉来存放属性(参考[[属性和列][属性和列]]), 你也可以把状态改变记录(参考[[跟踪任务状态][跟踪任务状态]])和计时时间(参考[[计算工作时间][计算工作时间]])存放在名为'LOGBOOK'的drawer中. 如果你想将状态变化信息存贮到'LOGBOOK'抽屉中,使用
   * C-c C-z ::
        添加一个带有时间戳信息的记录到名为'LOGBOOK'的抽屉中
   你可以调用org-export-with-drawers命令导出指定名字的抽屉.此时抽屉的内容会在导出内容里显示.属性抽屉是否可以导出可以通过org-export-with-properties变量进行设置.

** 区块

   Org-mode使用begin...end区块来实现很多功能,比如引入源代码(参考[[文字例子][文字例子]]),记录计时信息(参考[[计算工作时间][计算工作时间]]). 在这些区块的第一行上按TAB键可以折叠/扩展该区块. 你也可以在设置在启动时自动折叠所有的块,方法是配置变量'org-hide-block-startup'或者在每个文件加上
   #+BEGIN_SRC org
     #+STARTUP: hideblocks
     #+STARTUP: nohideblocks
   #+END_SRC

** 脚注

   Org-mode支持创建脚注. 
   通过顶格的方括号插入一个脚注.不允许有任何缩进.脚注结束于另一个定义的脚注或标题或两个连续的空行. 要引用已定义的脚注,只需要简单的在文本中用方括号做一个标记. 例如
   #+BEGIN_SRC org
     The Org homepage[fn:1] now looks a lot better than it used to.
     ...
     [fn:1] The link is: http://orgmode.org
   #+END_SRC
   
   Org-mode使用基于数字的语法扩展为可以为脚注命名并且可以选择给脚注提供行内定义.下面列举几种有效的脚注引用:
   * [ fn:name ] :: 
	一个带有名字的脚注引用,这里name是一个唯一的标签.如果是自动创建的脚注,则会是一个数字.
   * [ fn::This is the inline definitiion of this footnote ] :: 
	这是一个类似LaTeX的匿名脚注,其中脚注的定义直接放在引用的位置.
   * [ fn:name:a definition ] ::
        这是一个带有名字的自定义的脚注. 由于Org-mode允许从多处引用到同一个说明,你可以使用[ fn:name ]来创建更多的引用.

   脚注标记可以被自动创建,你也可以自定义标记自动创建时的名字. 这是由变量'org-footnote-auto-label'变量和变量相应的'#+STARTUP'关键字来决定的. 欲了解详情请查看该变量的文档字符串.

   下面这些都是操作脚注的命令
   * C-c C-x f ::
     脚注行为命令

     当光标位于脚注引用处,该命令会跳转到脚注定义处. 若光标处于脚注定义处,跳转到(第一个)引用处.

     否则,创建一个新的脚注. 根据变量'org-footnote-define-inline[fn:文档结构17]'的不同,该脚注的定义可能是作为引用的一部分,会放在文本中, 也可能放在另外的其他位置,这个位置由变量'org-footnote-section'决定.

     当使用带前置参数的方式调用该命令, 会显示出一个附加选项菜单供你选择:

       s   以引用顺序为依据对脚注的定义进行排序. 在编辑过程中,Org不会对脚注的定义进行排序操作. 如果你向对这些脚注的定义进行排序,使用这个命令,在对脚注定义进行排序的同时,也会根据'org-footnote-section'来移动整个条目. 用户可以通过配置变量'org-footnote-auto-adjust'来实现在每次插入/删除一个脚注后自动对脚注定义进行重新排序.
       r   对类型fn:N这样的以简单数字命名的脚注进行重新编号. 可以通过配置变量'org-footnote-auto-adjust'来实现每次插入/删除一个标注就自动对标注进行重新编号.
       S   先执行r操作,然后执行s操作
       n   标准化所有的标准,方法为先收集所有的标注定义(包括自定义的标注定义)并移动到一个特定的区域中,然后按顺序对这些定义进行编号. 那些标注引用随后也会转换为相应的数字. 这常常是在完成一篇文档前的最后一个步骤(例如,要发送email时). 在导出文档时,exporter会自动作这一步.或者当触发类似message-send-hook时,类似的动作也会自动触发.
       d   删除当前位置的标注,连同所有的标注定义和标注引用


     根据变量'org-footnote-auto-adjust[fn:文档结构18]'的值,可以设定每插入或删除一个脚注后,自动重编码和排序文档中的所有脚注.

   * C-c C-c :: 
	当光标位于脚注引用处时,跳转到脚注定义处. 若光标处于脚注定义处,则跳转回脚注引用处. 若在标注位置上用带前置参数的方式调用该命令,则弹出一个与C-c C-x f一样的菜单.

   * C-c C-o 或 鼠标左键 或鼠标右键 :: 
	脚注标签也是脚注定义与脚注引用相互之间的一种链接,你可以使用跳转链接的一般命令来在脚注定义/引用间相互跳转.

   * C-c ' ::
        在独立的窗口编辑光标处的脚注定义,可以通过C-c '键关闭窗口. 

** Org结构的minior模式
   如果你喜欢Org-mode编辑结构和格式化列表时的这种直接了当的感受,你可能希望在其他mode下,例如Text-mode或者mail-mode.也能使用这些命令. 你可以使用名为'orgstruct-mode'的minor mode. 使用'M-x orgstruct-mode'来切换mode. 如果你想在默认情况下启用'orgstruct-mode',例如设置在Message-mode下默认启用该mode,可以在配置文件中添加下面中的任一句
   #+BEGIN_SRC emacs-lisp
     (add-hook 'message-mode-hook 'turn-on-orgstruct)
     (add-hook 'message-mode-hook 'turn-on-orgstruct++)
   #+END_SRC

   'orgstruct-mode'被激活后,当光标在一行(对org来说)看起来像是标题或列表项的第一行的文本行上时,大多数的结构编辑命令都可以被使用,即使在major mode原本定义的功能键跟'orgstruct-mode'提供的功能键有冲突时,也一样. 如果光标所在行看起来不是那种特殊的行,Orgstruct mode不会有任何作用,就跟没有开启Orgstruct mode一样. 若你使用的是'orgstruct++-mode',Org也会在此模式中引入缩进和填充设置,并且会探测列表项第一行后面的列表项内容.
   你也可以使用Org结构编辑折叠和展开任何文件内的标题.假如你定义了orgstruct-heading-prefix-regexp:正则表达式必须与在Org标题前使用的本地前缀相匹配.例如:如果您在Emacs Lisp内设定此变量为";;",你将可以在Emacs Lisp的注释行内折叠和展开标题.有些命令,比如org-demote在设定了前缀时将不可用,但是折叠和展开可以正常的工作.

** Org语法
   由Nicolas Goaziou编写和维护的Org语法规范可以参考[[http://orgmode.org/worg/dev/org-syntax.html][语法规范示例]]. 它定了Org的主要特性,比如标题,段落,关联的关键字,元素和对象等.
   可以使用下面的命令导入一个Org buffer的目录结构:
     #+BEGIN_SRC emacs-lisp
       M-: (org-element-parse-buffer) RET
     #+END_SRC
   将当前buffer的目录结构按列表形式输出.导出引擎所信赖的信息保存在此列表内.大部分交互命令(如:结构编辑)也信赖于上下文的语法意义.
   你可以使用org-lint命令检查文档的语法错误.

* Footnotes

[fn:介绍1] 如果你不想在全局范围使用font-lock,你可以用下面一句配置来只在Org-mode下打开font-lock选项
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook 'turn-on-font-lock) 
  #+END_SRC

[fn:介绍2] 请考虑订阅邮件列表，以减少工作邮件列表版主的工作量。

[fn:文档结构1] 要配置C-a,C-e和标题环境中C-k的行为,参考参数'org-special-ctrl-a/e', 'org-special-ctrl-k和'org-ctrl-k-protect-subtree'

[fn:文档结构2] 计时功能仅对于星号数量少于30的标题有效

[fn:文档结构3] 参考org-cycle-emulate-tab选项

[fn:文档结构4] 参考org-cycle-global-at-bob选项

[fn:文档结构5] indirect buffer(关于indirect buffer的更多信息请查看Emacs手册)仅仅包含了原buffer中当前树的内容. 编辑这个indirect buffer也会修改原buffer,但是对原buffer的可见性不会有影响

[fn:文档结构6] 当org-agenda-inhibit-startup设置为non-nil时,第一次打开一个agenda文件时Org将不遵守默认的可见性状态 (参考[Speeding up your agendas][Speeding up your agendas]).

[fn:文档结构7] 参考变量'org-show-context-detail',参数详细定义了每次匹配多少内容

[fn:文档结构8] 这种行为依赖于'org-remove-highlights-with-change'选项

[fn:文档结构9] 当使用*作为列表项的标志时,这一行必须是有缩进的,否则它们会被认为是顶层的标题. 同样的道理,如果你为了得到一个干净的大纲视图而隐藏了前面的星星,那么以*开头的列表项和真正的标题之间会很难区分. 总之,即使支持'*'作为列表项标志,但最好还是不要用它.

[fn:文档结构10] 你可以通过配置'org-plain-list-ordered-item-terminator'来过滤掉它们中的任何一个.

[fn:文档结构11] 通过配置'org-alphabetical-lists',你也可以用类似("a.","A.","a)","A)") 作为列表项的标志. 为了最小化与普通文档的混淆,只准使用单个字符作为标志. 超过这个限制,列表项标志会自动变回数字.

[fn:文档结构12] 如果列表项中包含有复选框,那么这种标志必须放在复选框的前面. 如果你激活了字母列表,你也可以使用类似[@b]这样的形式.

[fn:文档结构13] 参考'org-empty-line-terminates-plain-lists'

[fn:文档结构14] 如果你不想分割列表项,自定义变量'org-M-RET-may-split-line'

[fn:文档结构15] 如果你想用这种方式遍历列表项,你可能需要自定义'org-list-use-circular-motion'

[fn:文档结构16] 循环行为参考'org-liste-use-circular-motion'

[fn:文档结构17] 相应的in-buffer设置为: '#+STARTUP: fninline'或者'#+STARTUP nofninline'

[fn:文档结构18] 相应的in-buffer设置为: 'fnadjust' 和 'nofnadjust'.

