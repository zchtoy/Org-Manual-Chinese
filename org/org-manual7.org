* Publishing


13 发布

Org包括一个发布管理系统,配置后可以将由互联的org文件组成的项目自动转换为HTML.对Org进行配置还可以将导出的HTML页面及相关附件自动上传到web服务器上,比如图片与源码文件.
您还可以使用org将文件转换成pdf格式,转换甚至可以将HTML与PDF结合进行,这样在服务器上便可提供上述两种格式的文件.
Org发布系统由David O’Toole完成. 

13.1 配置
发布系统需要配置指定的文件,路径与相关多项属性
 
13.1.1 配置变量org-publish-project-alist  
发布系统需要通过配置一个变量值来完成,该变量值名称为org-publish-project-alist,列表中的每一个元素都要配置项目,并且很可能为以下两种形式中之一:
("project-name" :property value :property value ...)
即,具有能够替换关键字与值的格式良好的属性列表
或
        (("project-name" :components ("project-name" "project-name" ...))

这两种情况下,项目通过指定的属性进行配置,来定义要发布的一系列的文件,即根据所配置的属性来发布这些文件.当某个项目采用上述第二种方式时,组件属性中的个别成员会被视为子项,组成文件时需要不同的发布选项.类如当发布一个”meta-project项目”时,所有的组件也会按照既定的顺序被同时发布.

13.1.2 文件的来源与目标
属性大多数是可选的,但也有一部分需要进行配置.需特别注意的是,Org系统需要知道在哪里查找文件的来源以及在哪里发布文件.
:base-directory        目录要包含发布的源文件
:publishing-directory   发布文件的输出路径.你可以直接使用适合Emacs tramp package的文件名语法向web服务器进行发布.或者你可以发布到本地目录然后使用外部工具将文件上传到网站.(详见13.2[文件上传])
:preparation-function   发布启动前要调用函数或函数列表,举例来说,要先执行发布文件更新.	每个在项目属性列表中被调用的函数被视为单一函数.
:completion-function   函数或函数列表在完成发布后调用过程,举例来说,更改所生成文件的权限.这些在项目属性列表中调用的函数同样被视为单一函数.

13.1.3 选择文件
默认情况下,基础目录下的所有的文件都具有.org扩展名,被视为项目的一部分.可以通过属性设置来更改.
:base-extension      源文件的扩展名(没有. !)实际上是一个正则表达式.如果想得到:base-directory下的所有文件则需要设置此项,即使没有扩展名.
:exclude            正则表达式对不应该发布的文件名进行匹配,即使是在有扩展名的基础上被选中.
:include             :base-extension与:exclude都要包含文件列表
:recursive           非空,递归检查base-directory的文件以发布

13.1.4 发布动作
发布意为将文件复制到目标目录,并在此过程中进行转化.默认转换是将Org导出为HTML文件,由函数org-html-publish-to-html来调用HTML导出程序并完成(详见12.9[HTML导出]).
但您也可以使用org-latex-publish-to-pdf函数或ascii,texinfo等将内容发布为PDF文件.
如果要将Org文件作为包含归档、注释与删除含有标签树状结构的.org文件发布,需要使用函数org-org-publish-to-org,此函数将生成文件.org并将其放在发布目录中.如果您需要一个HTML版本的这个文件,设置参数:htmlized-source to t,在发布目录中生成文件.org.html.
而其它如图片等文件可使用org-publish-attachment将其复制到发布的目标位置即可.
而不含org文件,每次都需要指定发布的函数:
:publishing-function        执行文件发布的函数,同样也是一个功能函数列表,都将会被轮流调用.
:htmlized-source           非空,为发布htmlized的源
函数必须接受三个参数:属性列表至少需包含一个:publishing-directory属性,待发布的文件名与输出文件的发布目录路径.并使用指定的文件,进行必要的转换(如果有的话)并将结果放入目标文件夹.

13.1.5 导出选项
属性列表可在发布过程中设置导出选项.在大多数情况下,这些属性对应于Org.中的用户变量.虽然其中一些属性可用来导出后端,但大多数都是通过后端来指定的.接下来的部分列出了属性及其所属的变量.详情请参阅这些选项的文档字符串.当属性在org-publish-project-alist中给定值时,其设置将在发布期间覆盖相应用户变量(如果有的话)的值.如果文件中已设置了(详见12.2[导出设置])选项,也将被一起覆盖.

通用属性
:archived-trees                org-export-with-archived-trees
:exclude-tags                 org-export-exclude-tags
:headline-levels               org-export-headline-levels
:language                    org-export-default-language
:preserve-breaks              org-export-preserve-breaks
:section-numbers             org-export-with-section-numbers
:select-tags                  org-export-select-tags
:with-author                 org-export-with-author
:with-broken-links             org-export-with-broken-links
:with-clocks                  org-export-with-clocks
:with-creator                 org-export-with-creator
:with-date                   org-export-with-date
:with-drawers                org-export-with-drawers
:with-email                  org-export-with-email
:with-emphasize              org-export-with-emphasize
:with-fixed-width              org-export-with-fixed-width
:with-footnotes                org-export-with-footnotes
:with-latex                    org-export-with-latex
:with-planning                 org-export-with-planning
:with-priority                  org-export-with-priority
:with-properties               org-export-with-properties
:with-special-strings            org-export-with-special-strings
:with-sub-superscript           org-export-with-sub-superscripts
:with-tables                   org-export-with-tables
:with-tags                     org-export-with-tags
:with-tasks                    org-export-with-tasks
:with-timestamps              org-export-with-timestamps
:with-title                     org-export-with-title
:with-toc                      org-export-with-toc
:with-todo-keywords            org-export-with-todo-keywords

ASCII详细属性
:ascii-bullets                     org-ascii-bullets
:ascii-caption-above               org-ascii-caption-above
:ascii-charset                    org-ascii-charset
:ascii-global-margin               org-ascii-global-margin
:ascii-format-drawer-function       org-ascii-format-drawer-function
:ascii-format-inlinetask-function     org-ascii-format-inlinetask-function
:ascii-headline-spacing            org-ascii-headline-spacing
:ascii-indented-line-width          org-ascii-indented-line-width
:ascii-inlinetask-width             org-ascii-inlinetask-width
:ascii-inner-margin               org-ascii-inner-margin
:ascii-links-to-notes               org-ascii-links-to-notes
:ascii-list-margin                 org-ascii-list-margin
:ascii-paragraph-spacing           org-ascii-paragraph-spacing
:ascii-quote-margin               org-ascii-quote-margin
:ascii-table-keep-all-vertical-lines    org-ascii-table-keep-all-vertical-lines
:ascii-table-use-ascii-art            org-ascii-table-use-ascii-art
:ascii-table-widen-columns         org-ascii-table-widen-columns
:ascii-text-width                  org-ascii-text-width
:ascii-underline                   org-ascii-underline
:ascii-verbatim-format             org-ascii-verbatim-format

Beamer详细属性
:beamer-theme                   org-beamer-theme
:beamer-column-view-format        org-beamer-column-view-format
:beamer-environments-extra        org-beamer-environments-extra
:beamer-frame-default-options      org-beamer-frame-default-options
:beamer-outline-frame-options      org-beamer-outline-frame-options
:beamer-outline-frame-title         org-beamer-outline-frame-title
:beamer-subtitle-format            org-beamer-subtitle-format



HTML详细属性
:html-allow-name-attribute-in-anchors          org-html-allow-name-attribute-in-anchors
:html-checkbox-type                         org-html-checkbox-type
:html-container                             org-html-container-element
:html-divs                                  org-html-divs
:html-doctype                              org-html-doctype
:html-extension                             org-html-extension
:html-footnote-format                        org-html-footnote-format
:html-footnote-separator                     org-html-footnote-separator
:html-footnotes-section                       org-html-footnotes-section
:html-format-drawer-function                  org-html-format-drawer-function
:html-format-headline-function                org-html-format-headline-function
:html-format-inlinetask-function                org-html-format-inlinetask-function
:html-head-extra                            org-html-head-extra
:html-head-include-default-style                org-html-head-include-default-style 	
:html-head-include-scripts                    org-html-head-include-scripts
:html-head                                 org-html-head
:html-home/up-format                       org-html-home/up-format
:html-html5-fancy                           org-html-html5-fancy
:html-indent                                org-html-indent
:html-infojs-options                          org-html-infojs-options
:html-infojs-template                         org-html-infojs-template
:html-inline-image-rules                      org-html-inline-image-rules
:html-inline-images                          org-html-inline-images
:html-link-home                             org-html-link-home
:html-link-org-files-as-html                    org-html-link-org-files-as-html
:html-link-up                               org-html-link-up
:html-link-use-abs-url                        org-html-link-use-abs-url
:html-mathjax-options                       org-html-mathjax-options
:html-mathjax-template                      org-html-mathjax-template
:html-metadata-timestamp-format             org-html-metadata-timestamp-format
:html-postamble-format                      org-html-postamble-format
:html-postamble                            org-html-postamble
:html-preamble-format                      org-html-preamble-format
:html-preamble                            org-html-preamble
:html-table-align-individual-fields              org-html-table-align-individual-fields
:html-table-attributes                       org-html-table-default-attributes
:html-table-caption-above                    org-html-table-caption-above
:html-table-data-tags                        org-html-table-data-tags
:html-table-header-tags                     org-html-table-header-tags
:html-table-row-tags                        org-html-table-row-tags
:html-table-use-header-tags-for-first-column    org-html-table-use-header-tags-for-first-column
:html-tag-class-prefix                       org-html-tag-class-prefix
:html-text-markup-alist                      org-html-text-markup-alist
:html-todo-kwd-class-prefix                  org-html-todo-kwd-class-prefix
:html-toplevel-hlevel                       org-html-toplevel-hlevel
:html-use-infojs                            org-html-use-infojs
:html-validation-link                        org-html-validation-link
:html-viewport                            org-html-viewport
:html-xml-declaration                       org-html-xml-declaration

LATEX详细属性
:latex-active-timestamp-format                org-latex-active-timestamp-format
:latex-caption-above                         org-latex-caption-above
:latex-classes                               org-latex-classes
:latex-class                                 org-latex-default-class
:latex-compiler                             org-latex-compiler
:latex-default-figure-position                  org-latex-default-figure-position
:latex-default-table-environment               org-latex-default-table-environment
:latex-default-table-mode                     org-latex-default-table-mode
:latex-diary-timestamp-format                 org-latex-diary-timestamp-format
:latex-footnote-defined-format                org-latex-footnote-defined-format
:latex-footnote-separator                     org-latex-footnote-separator
:latex-format-drawer-function                 org-latex-format-drawer-function
:latex-format-headline-function                org-latex-format-headline-function
:latex-format-inlinetask-function               org-latex-format-inlinetask-function
:latex-hyperref-template                      org-latex-hyperref-template
:latex-image-default-height                    org-latex-image-default-height
:latex-image-default-option                    org-latex-image-default-option
:latex-image-default-width                    org-latex-image-default-width
:latex-images-centered                       org-latex-images-centered
:latex-inactive-timestamp-format               org-latex-inactive-timestamp-format
:latex-inline-image-rules                      org-latex-inline-image-rules
:latex-link-with-unknown-path-format           org-latex-link-with-unknown-path-format
:latex-listings-langs                           org-latex-listings-langs
:latex-listings-options                        org-latex-listings-options
:latex-listings                               org-latex-listings
:latex-minted-langs                          org-latex-minted-langs
:latex-minted-options                        org-latex-minted-options
:latex-prefer-user-labels                      org-latex-prefer-user-labels
:latex-subtitle-format                        org-latex-subtitle-format
:latex-subtitle-separate                      org-latex-subtitle-separate
:latex-table-scientific-notation                 org-latex-table-scientific-notation
:latex-tables-booktabs                       org-latex-tables-booktabs
:latex-tables-centered                       org-latex-tables-centered
:latex-text-markup-alist                      org-latex-text-markup-alist
:latex-title-command                        org-latex-title-command
:latex-toc-command                         org-latex-toc-command
Markdown详细属性
:md-footnote-format                     org-md-footnote-format
:md-footnotes-section                    org-md-footnotes-section
:md-headline-style                       org-md-headline-style

ODT详细属性
:odt-content-template-file                org-odt-content-template-file
:odt-display-outline-level                 org-odt-display-outline-level
:odt-fontify-srcblocks                    org-odt-fontify-srcblocks
:odt-format-drawer-function              org-odt-format-drawer-function
:odt-format-headline-function             org-odt-format-headline-function
:odt-format-inlinetask-function            org-odt-format-inlinetask-function
:odt-inline-formula-rules                 org-odt-inline-formula-rules
:odt-inline-image-rules                   org-odt-inline-image-rules
:odt-pixels-per-inch                     org-odt-pixels-per-inch
:odt-styles-file                          org-odt-styles-file
:odt-table-styles                        org-odt-table-styles
:odt-use-date-fields                     org-odt-use-date-fields

Texinfo详细属性
:texinfo-active-timestamp-format             org-texinfo-active-timestamp-format
:texinfo-classes                            org-texinfo-classes
:texinfo-class                              org-texinfo-default-class
:texinfo-def-table-markup                   org-texinfo-def-table-markup
:texinfo-diary-timestamp-format              org-texinfo-diary-timestamp-format
:texinfo-filename                          org-texinfo-filename
:texinfo-format-drawer-function              org-texinfo-format-drawer-function
:texinfo-format-headline-function             org-texinfo-format-headline-function
:texinfo-format-inlinetask-function            org-texinfo-format-inlinetask-function
:texinfo-inactive-timestamp-format           org-texinfo-inactive-timestamp-format
:texinfo-link-with-unknown-path-format       org-texinfo-link-with-unknown-path-format
:texinfo-node-description-column            org-texinfo-node-description-column
:texinfo-table-scientific-notation             org-texinfo-table-scientific-notation
:texinfo-tables-verbatim                    org-texinfo-tables-verbatim
:texinfo-text-markup-alist                   org-texinfo-text-markup-alist

13.1.6 发布文件之间的链接
要创建两个Org文件之间的链接,可能会用到‘[[file:foo.org][The foo]]’或更简单的‘file:foo.org’,(详见4.3[外部链接]).发布后,此链接变为foo.html的链接.因此,您可以将”org web”项目页面之间互相链接,并按您预想的方式发布到HTML.如果还想发布Org源文件并对其进行链接,使用http:link代替file:link,因为file: links会被转换成相应的html文件.
您也可以链接相关的文件,比如图片.如果您谨慎的处理相关文件名,并且已配置了Org来上传相关文件,这些链接都将可以使用.详见13.3.2[复杂例子],对于此用法的举例.
最后,所发布文档间的链接可以包含一些搜索选项(详见4.7[搜索选项]),这些选项将被解析到链接文件中的适当位置.举例说明,一旦发布到HTML,以下链接都将指向foo.html中的专用锚点.
[[file:foo.org::*heading]]
[[file:foo.org::#custom-id]]
[[file:foo.org::target]]

13.1.7 生成网站地图
以下属性可用于控制发布给定项目的文件映射.
:auto-sitemap               当未非空时,通过org-publishcurrent-
project or org-publish-all来发布网站地图.
:sitemap-filename           输出网站地图的文件名.默认为sitemap.org
                          (变为sitemap.html)
:sitemap-title               网站地图页面标题.默认为文件名
:sitemap-function           用于生成网站地图的插件功能.默认为org-publish-org-sitemap,  
                          生成链接到项目中所有文件的简单列表.
:sitemap-sort-folders         网站地图中文件夹的位置.设置其顺序,第一个(默认)或最后一个显示文件夹,其它的值混合有文件与文件夹.
:sitemap-sort-files           网站地图中文件分类.按字母顺序设置(默认)、按时间顺序或反时间顺序.使用org-publish-find-date进行文件日期的检索.
:sitemap-ignore-case         是否区分大小写？默认为空
:sitemap-file-entry-format     此选项为在网站地图内的输入格式.是一个带有一些转义符的格式字符串:%t代表文件的标题,%a代表文件的作者,%d代表文件日期.使用org-publishfind-date进行检索,使用org-publishsitemap-date-format进行格式化.%t为默认项.
:sitemap-date-format        此项将绕过org-publish-sitemap-date-format,默认为%Y-%m-%d
:sitemap-sans-extension      为非空时,从所生成的网站地图中删除文件扩展名.如具有cool URIs会很有用(http://www.w3.org/Provider/Style/URI).此项默认为空.

13.1.8 生成索引
Org模式可以在发布项目的文件中生成一个索引.
:makeindex                 为非空时,在文件theindex.org中生成一个索引,
然后以theindex.html进行发布.
当首次使用:makeindex set进行发布时该文件会被创建.
该文件只包含语句#+INCLUDE: "theindex.inc”.
然后您可以通过添加标题,样式信息等围绕个include语句来进行构建.索引项用#+INDE
关键字指定.包含感叹号的条目将会创建子项
* Curriculum Vitae
#+INDEX: CV
#+INDEX: Application!CV


13.2 文件上传
对于已经在使用第三方同步(比如rsync或unison)工具的用户,最好不要使用对Tramp
有严重依赖的Org模式,Tramp虽然很有用也很强大,但对于多个文件传输却并不那么有效
并且已知在大量使用下会容易引起问题.
专用的同步工具的优点除了比较时间戳外,也可以用做对内容和权限/属性检查.
因此,您可能希望将Web发布到本地目录,然后使用unison或rsync与远程主机进行同步.
unison(此处以unison为例)可配置为传输到远程目标而使用的文件,很大程度上简化了项目的发布定义.只需将所有文件保存在正确位置,使用org-publish来处理Org文件然后其余的工作就交由同步工具来完成.这种情况下,你无需在项目定义中添加附件如jpg,css或gif文件,因为第三方工具会对这些进行同步.
另外,发布到本地目录要比发布到远程目录快得多,使您可以轻松的重新发布整个项目.如果将org-publish-use-timestamps-flag设置为空,您便可以对任何外部文件进行更改.此外还需说明的是Org的时间戳机制有个缺点,它无法检测包含的文件是否已被修改.

13.3 样本配置
下面我们提供两个示例配置.第一个是简单的项目,只发布一组org文件.第二个例子是具有多组件的项目,相对复杂一些.

13.3.1 示例:简单发布配置
此示例将一组Org文件发布到本地计算机上的public_html目录.
(setq org-publish-project-alist
'(("org"
:base-directory "~/org/"
:publishing-directory "~/public_html"
:section-numbers nil
:with-toc nil
:html-head "<link rel=\"stylesheet\"
href=\"../other/mystyle.css\"
type=\"text/css\"/>")))

13.3.2 示例:复杂发布配置
此示例发布了一个完整的网站,包括转换为HTML的Org文件,图片文件,Emacs Lisp源码,样式表.发布目录为远程且不包含私人文件.
为确保链接会被保存,对Web服务器上的目录结构进行复制时需谨慎,使用相对文件路径.举例来说,如果Org文件保存在~/org而可发布的图片在~/images,使用文件:../images/myimage.png来链接图片.
在web服务器上,图片的相对路径应该是相同的,您可以通过在Web服务器上的正确位置设置”images”文件夹并向其发布图片来完成此目的.
(setq org-publish-project-alist
'(("orgfiles"
:base-directory "~/org/"
:base-extension "org"
:publishing-directory "/ssh:user@host:~/html/notebook/"
:publishing-function org-html-publish-to-html
:exclude "PrivatePage.org" ;; regexp
:headline-levels 3
:section-numbers nil
:with-toc nil
:html-head "<link rel=\"stylesheet\"
href=\"../other/mystyle.css\" type=\"text/css\"/>"
:html-preamble t)

("images"
:base-directory "~/images/"
:base-extension "jpg\\|gif\\|png"
:publishing-directory "/ssh:user@host:~/html/images/"
:publishing-function org-publish-attachment)

("other"
:base-directory "~/other/"
:base-extension "css\\|el"
:publishing-directory "/ssh:user@host:~/html/other/"
:publishing-function org-publish-attachment)
("website" :components ("orgfiles" "images" "other"))))

13.4 启动发布
完成正确配置后,Org可以使用以下命令进行发布:
C-c C-e P x                                   org-publish
提示具体项目并发布所有属于该项目的文件.
C-c C-e P p                                   org-publish-current-project
发布包含当前文件的项目.
C-c C-e P f                                    org-publish-current-file
只发布当前文件
C-c C-e P a                                    org-publish-all
发布全部项目
Org使用时间戳来跟踪文件何时被更改.上述功能通常只用来发布已更改的文件.您可以覆盖此操作,并强制发布所有文件,方法是向上述任一命令赋予前缀参数,或通过变量org-publishuse-timestamps-flag来进行自定义.



org-mode还允许将一系列项目内相关的org文件发布为一系列的HTML文件,并且可以自动上传这些HTML及相关附件(例如图片,源代码文件等)到web服务器上.
** 配置
配置发布时,主要配置的就是 ~org-publish-project-alist~ 这个变量. 每个元素配置一个project的内容,且可能为以下两种格式中的一种
#+BEGIN_SRC emacs-lisp
  ("project-name" :property value :property value ...)
  ;; i.e., a well-formed property list with alternating keys and values
  ;; or
  ("project-name" :components ("sub-project-name" "sub-project-name" ...))
#+END_SRC
其中,第二种格式表明"project-name"是由"sub-project-name"组成的,当publish "project-name"时,会逐个publish各个"sub-project-name"
*** Sources and destinations for files
这些属性指定了要发布哪些org文件,发布到哪个地方去.

+ :base-directory :: 包含源org文件的目录
+ :publishing-directory :: 发布后的产出文件存放的目录,支持通过tramp直接发布到远程主机上
+ :preparation-functiion :: 在真正发布之前被调用的函数/函数列表. 在这些函数内,可以使用变量 =project-plist= 来引用project property list
+ :completion-function :: 在发布动作完成之后被调用的函数/函数列表. 在这些函数内,可以使用变量 =project-plist= 来引用project property list
*** selecting files
默认情况下, ~:base-directory~ 中的所有以 =.org= 结尾的文件都被认为是项目的源文件. 但可以通过以下属性修改:

+ :base-extension :: 该变量可以为一个正则表达式表示以哪些后缀的源文件(不包含.)被认为是项目的源文件. 若值为符号'any,则表示 ~:base-directory~ 中的所有文件(甚至哪些无后缀的文件)
+ :exclude :: 匹配该正则表达式的文件不会被发布
+ :include :: 这时一个文件的列表,表示无论 ~:base-extension~ 和 ~:exclude~ 怎么设置,这些文件都会被发布
+ :recursive :: 表示是否递归发布 ~:base-directory~ 中的子目录下的文件
*** Publishing action
发布的过程通常分为两个步骤, 第一步先将org文件转换为目标格式的文件,第二步将转换后的文件拷贝到目的目录中.

默认,会使用 =org-html-publish-to-html= 导出为html文件.

但是你也可以通过配置 ~:publishing-function~ 的值来设置将org文件导出为其他格式的文件. 

+ org-latex-publish-to-pdf :: 导出为pdf
+ org-org-publish-to-org :: 导出为org,但是会把已归档的,已注释的以及tag-excluded的树給删掉
+ org-publish-attachment :: 并不会对文件作什么转换,因为对于类似图片这种附件来说,发布过程只需要直接拷贝到目标目录就行了

~:publishing-function~ 的值为一个函数的list,则其中的函数会被依次调用. 且该函数应该接受三个参数:

1. 一个至少包含 ~:publishing-directory~ 的属性列表
2. 待发布的文件名称
3. 输出文件存储的目录路径

这些函数要实现的功能为: 转换指定的文件并将结果文件放到目标目录下.

~:htmlized-source~ 的值决定了发布时,是否对代码块中的代码进行作色
*** 其他影响export的属性

下面列出其他会影响export的属性,这些属性的默认值与org的特定变量有关

| export的属性                         | org buffer对应变量                      |
|--------------------------------------+-----------------------------------------|
| ‘:archived-trees’                  | ‘org-export-with-archived-trees’      |
| ‘:exclude-tags’                    | ‘org-export-exclude-tags’             |
| ‘:headline-levels’                 | ‘org-export-headline-levels’          |
| ‘:language’                        | ‘org-export-default-language’         |
| ‘:preserve-breaks’                 | ‘org-export-preserve-breaks’          |
| ‘:section-numbers’                 | ‘org-export-with-section-numbers’     |
| ‘:select-tags’                     | ‘org-export-select-tags’              |
| ‘:with-author’                     | ‘org-export-with-author’              |
| ‘:with-creator’                    | ‘org-export-with-creator’             |
| ‘:with-drawers’                    | ‘org-export-with-drawers’             |
| ‘:with-email’                      | ‘org-export-with-email’               |
| ‘:with-emphasize’                  | ‘org-export-with-emphasize’           |
| ‘:with-fixed-width’                | ‘org-export-with-fixed-width’         |
| ‘:with-footnotes’                  | ‘org-export-with-footnotes’           |
| ‘:with-latex’                      | ‘org-export-with-latex’               |
| ‘:with-planning’                   | ‘org-export-with-planning’            |
| ‘:with-priority’                   | ‘org-export-with-priority’            |
| ‘:with-special-strings’            | ‘org-export-with-special-strings’     |
| ‘:with-sub-superscript’            | ‘org-export-with-sub-superscripts’    |
| ‘:with-tables’                     | ‘org-export-with-tables’              |
| ‘:with-tags’                       | ‘org-export-with-tags’                |
| ‘:with-tasks’                      | ‘org-export-with-tasks’               |
| ‘:with-timestamps’                 | ‘org-export-with-timestamps’          |
| ‘:with-toc’                        | ‘org-export-with-toc’                 |
| ‘:with-todo-keywords’              | ‘org-export-with-todo-keywords’       |
| ‘:html-doctype’                    | ‘org-html-doctype’                    |
| ‘:html-container’                  | ‘org-html-container-element’          |
| ‘:html-html5-fancy’                | ‘org-html-html5-fancy’                |
| ‘:html-xml-declaration’            | ‘org-html-xml-declaration’            |
| ‘:html-link-up’                    | ‘org-html-link-up’                    |
| ‘:html-link-home’                  | ‘org-html-link-home’                  |
| ‘:html-link-org-as-html’           | ‘org-html-link-org-files-as-html’     |
| ‘:html-link-use-abs-url’           | ‘org-html-link-use-abs-url’           |
| ‘:html-head’                       | ‘org-html-head’                       |
| ‘:html-head-extra’                 | ‘org-html-head-extra’                 |
| ‘:html-inline-images’              | ‘org-html-inline-images’              |
| ‘:html-extension’                  | ‘org-html-extension’                  |
| ‘:html-preamble’                   | ‘org-html-preamble’                   |
| ‘:html-postamble’                  | ‘org-html-postamble’                  |
| ‘:html-table-attributes’           | ‘org-html-table-default-attributes’   |
| ‘:html-table-row-tags’             | ‘org-html-table-row-tags’             |
| ‘:html-head-include-default-style’ | ‘org-html-head-include-default-style’ |
| ‘:html-head-include-scripts’       | ‘org-html-head-include-scripts’       |

写在org 文件中的option的优先级 > =org-publish-project-alist= 中配置的优先级 > org相关变量的值
*** Links between published files
在org文件中可以使用下面两种方式创建连接到另一个org文件中的链接. 
#+BEGIN_SRC org
  [[file:foo.org][The foo]] 
  file:foo.org
#+END_SRC

当发布这种org文件时,这种连接到org的链接会自动转换为连接到对应的html文件.

若你不希望进行这种转换,则需要使用 =http:= 协议而不能是 =file:= 协议.
*** Generating a sitemap
+ :auto-sitemap :: 若为非nil,则在 `org-publish-current-project' 或 `prg-publish-all' 时自动发布sitemap
+ :sitemap-filename :: sitemap的输出文件名,默认为`sitemap.org'(发布后变成sitemap.html)
+ sitemap-title :: sitemap网页的title. 默认为sitemap的文件名
+ sitemap-function :: 用来生成sitemap的函数. 默认为 =org-publish-org-sitemap=,它会生成一个系列连接到项目内其他文件的链接列表
+ sitemap-sort-folders :: sitemap中文件夹的存放位置. 默认是 =first=,表示将文件夹放在最前面. 也可以设置成 =last=,表示将文件夹放在最后面. 其他的值则表示交叉放置
+ sitemap-sort-files :: sitemap中文件的排序方式. 默认为 =alphabetically=,还可以是 =chronologically= 或 =anti-chronologically=
+ sitemap-ignore-case :: sitemap中文件排序时,是否忽略大小写,默认为nil表示不忽略
+ sitemap-file-entry-format :: 指定sitemap中链接的格式. 其中 =%t= 表示title, =%a= 表示author, =%d= 表示date,该date由函数 =org-publish-find-date= 获取,并经由 =org-publish-sitemap-date-format= 格式化
+ :sitemap-date-format :: 指定了sitemap entry中的date的显示格式
+ :sitemap-sans-extension :: 若为非nil,则在产生sitemap时会删除掉文件名的后缀. 默认为nil
*** Generating an index
org-mode发布时,可以自动产生index文件.

+ :makeindex :: 若为非nil,则会产生 =theindex.org= 并发布为 =theindex.html= 

The file will be created when first publishing a project with the =:makeindex= set. The file only contains a statement =#+INCLUDE: theindex.inc=.  
You can then build around this include statement by adding a title, style information, etc.

** 发布相关命令
+ C-c C-e P x (org-publish) :: 选择并发布项目
+ C-c C-e P p (org-publish-current-project) :: 发布当前文件所属的项目
+ C-c C-e P f (org-publish-current-file) :: 只发布当前文件
+ C-c C-e P a (org-publish-all) :: 发布所有项目

org根据时间戳来决定文件是否被修改. 一般情况下,上面的函数只会发布已经更改过的文件. 但可以通过以下几种方法来强制发布所有文件
+ 调用上面函数时,带上前缀参数
+ 设置变量 =org-publish-use-timestamps-flag= 为nil

** 例子
*** 一个单组件项目的发布
下面的例子中,将一些org文件发布到本机的 =~/public_html= 目录中
#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
           '(("org"
              :base-directory "~/org/"
              :publishing-directory "~/public_html"
              :section-numbers nil
              :with-toc nil
              :html-head "<link rel=\"stylesheet\"
                         href=\"../other/mystyle.css\"
                         type=\"text/css\"/>")))

#+END_SRC

*** 一个多组件项目的发布
下面是一个复杂的多的项目发布例子. 除了将org文件发布成html文件外,还包括图片,源代码和样式文件的发布.
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist
        '(("orgfiles"
            :base-directory "~/org/"
            :base-extension "org"
            :publishing-directory "/ssh:user@host:~/html/notebook/"
            :publishing-function org-html-publish-to-html
            :exclude "PrivatePage.org"   ;; regexp
            :headline-levels 3
            :section-numbers nil
            :with-toc nil
            :html-head "<link rel=\"stylesheet\"
                    href=\"../other/mystyle.css\" type=\"text/css\"/>"
            :html-preamble t)

           ("images"
            :base-directory "~/images/"
            :base-extension "jpg\\|gif\\|png"
            :publishing-directory "/ssh:user@host:~/html/images/"
            :publishing-function org-publish-attachment)

           ("other"
            :base-directory "~/other/"
            :base-extension "css\\|el"
            :publishing-directory "/ssh:user@host:~/html/other/"
            :publishing-function org-publish-attachment)
           ("website" :components ("orgfiles" "images" "other"))))
#+END_SRC
* Working with source code
  org提供了对代码块的多种处理方式,比如使用原生的major-mode编辑代码块,执行代码块,将代码块抽取到其他源文件中去,导出代码块及其结果为其他格式的文档.
** 代码块的结构
代码块的结果一般如下所示:
#+BEGIN_SRC org
  ,#+NAME: <name>
  ,#+BEGIN_SRC <language> <switches> <header arguments>
         <body>
  ,#+END_SRC

#+END_SRC

还有一种简写形式如下:
#+BEGIN_SRC org
  src_<language>{<body>}
#+END_SRC
或
#+BEGIN_SRC org
  src_<language>[<header arguments>]{<body>}
#+END_SRC

其中
+ ~#+NAME~ 行是可选的,并常用来为代码块命名,以方便在其他地方(可以跨文件)调用该代码块. =<name>= 应该是唯一的,否则结果未定义

+ ~<language>~ 指明了代码块中的代码是哪种语言的代码

+ ~<switchers>~ 也是可选的,它控制了代码块的导出方式

+ ~<header arguments>~ 也是可选的,它控制了代码块的执行,导出与抽取的各方面的行为. ~<header arguments>~ 还可以通过buffer或subtree的属性来控制

+ ~<body>~ 为代码块的具体内容

** 编辑代码块
使用 =C-c '= 来编辑当前的代码块. 它会新开一个编辑buffer,进入<language>的major mode,并插入代码块的原内容.
在该编辑buffer中按 =C-x C-s= 会将编辑buffer中的内容写回原代码块. 
当然,你可以通过设置 =org-edit-src-auto-save-idle-delay= 的值来设置空闲多少秒后自动保存buffer内容. 或者通过设置 =org-edit-src-turn-on-auto-save= 来让进入代码块后自动开启 =auto-save-mode=
若编辑完后,想退出编辑窗口,再按一次 ~C-c '~ 即可.

在按 =C-c '= 进入编辑buffer后,会自动激活 =org-src-mode=. 同时,还可以通过以下变量来设置编辑buffer的其他行为(更多配置项请参见配置组 =org-edit-structure=)

+ org-src-lang-modes

  若 =<lang>-mode= 存在,则默认编辑buffer会进入该major-mode. 但通过设置该变量可以映射任意的 =<lang>= 为其他的major-mode

+ org-src-window-setup

  该变量控制了当创建编辑buffer后,各window怎么排列

+ org-src-preserve-indentation

  该变量控制了是否保持代码块中的空格为空格,而不转换为TAB.

  默认为nil,表示将代码块中的空格转换为TAB. 当代码块中的代码为类似python这种对空格缩进很严格的语言时,最好设置为t

+ org-src-ask-before-returnning-to-edit-buffer

  当已经存在编辑buffer的情况下,再次按下 ~C-c '~,该变量控制是否弹出提示.

+ org-src-fontify-natively

  在 =org= buffer中,也高亮显示代码块中的代码.
** 导出代码块及其结果
~:exports~ 这一header argument控制了导出代码块及其执行结果时的行为.

+ :exports code

  大多数语言的默认设置(ditta是个例外). 表示只导出代码块的内容

+ :exports results

  执行代码块并导出结果. 若之前已经有了该代码块的结果,则更新之前的结果而不是插入新的结果.

  代码块本身不会被导出

+ :exports both

  代码块及其计算结果都被导出

+ :exports none

  代码块及其计算结果都不会被导出


~org-export-babel-evaluate~ 变量可以控制在导出org时,哪些代码块可以被执行

+ nil :: 所有代码块都不会执行,这在包含有不安全的代码块时特别有用
+ inline-only :: 只有inline 代码块会被执行. 非inline代码块需要人手工执行,这一特性常用于避免在导出时执行过于消耗资源的代码
** 抽取代码块
从代码块中抽取代码存到一个纯源代码文件中的过程称之为"tangling"(这一术语来源于文学编程社区). 在tangling的过程中,代码块中的代码会经过 ~org-babel-expand-src-block~ 的扩展,该函数会扩展代码块中的变量与 =noweb= 风格的引用.
*** Header arguments
+ :tangle no :: 默认值,表示不抽取出该代码块中的代码
+ :tangle yes :: 抽取出代码块中的代码,存放的文件命为将该org文件后的 =.org= 替换为代码块语言后缀后的名称
+ :tangle filename :: 抽取出代码块中的代码,存放在filename中
*** Function
- org-babel-tangle :: tangle当前文件,若带有prefix argument则只tangle当前代码块. 快捷键为 ~C-c C-v t~
- org-babel-tangle-file :: 选择一个文件来tangle. 快捷键为 ~C-c C-v f~
- org-babel-tangle-jump-to-org :: 该函数可以从tangle的代码处跳回源org文件的代码块处. 但前提是 ~padline~ header argument必须为True(默认),且 ~comment~ header argument必须为 ~link~
*** Hooks
+ org-babel-post-tangle-hook :: Hook run in code files tangled by `org-babel-tangle'.
** 执行代码块
代码块可以被执行,且执行结果可以被插入org buffer中. 执行的结果与代码块之间会有一行间隔文本,该间隔默认为 ~#+RESULTS~ (该值由 ~org-babel-results-keyword~ 的值决定). 
若代码块的Header argument开启了cache,则间隔行文本还可能有一个cache标识符

默认只有 =emacs-lisp= 的代码块能够被执行,但是可以通过设置 ~org-babel-load-languages~ 的值来决定哪些语言的代码块能够被执行.

最简单的执行代码块的办法就是把光标定位到代码块中,然后按下 ~C-c C-c~ 或者 ~C-c C-v e~, 这会调用 ~org-babel-execute-src-block~ 函数来执行代码块并将结果插入org buffer中.

若为代码块命名了,则可以在org buffer或org table的任意地方执行该代码块. 但前提是该代码块位于当前org buffer或 ~Library of Babel~ 中. 

执行指定名称代码块的方法为使用单独的 ~#+CALL:~ 行或它的嵌入式语法

~#+CALL:~ 的语法为:
#+BEGIN_SRC org
   ,#+CALL: <name>(<arguments>)
   ,#+CALL: <name>[<inside header arguments>](<arguments>) <end header arguments>
#+END_SRC
其嵌入式语法为:
#+BEGIN_SRC org
  ... call_<name>(<arguments>) ...
  ... call_<name>[<inside header arguments>](<arguments>)[<end header arguments>] ...
#+END_SRC

其中:
+ <name>

  要执行代码块的名字

+ <arguments>

  传递给代码块的参数,该参数会覆盖代码块header argument中的参数值. 下面是一个例子
  #+BEGIN_SRC org
    ,#+CALL: double(n=4)
  #+END_SRC

+ <inside header arguments>

  这些参数会被应用到指定的代码块中去,从而影响代码块的执行. 例如 ~[:result output]~ 就会搜集代码块执行过程中所有输出到 =STDOUT= 中的结果

+ <end header arguments>

  这些参数作用于"calling instance"而并不会影响到指定代码块的执行. 这些参数影响的是执行结果如何插入到org buffer中以及 =call line= 语句本身export时的参数. 

  例如: ~[:results html]~ 会在插入执行结果时,用 ~BEGIN_HTML:~ 块包裹起来.
*** Library of Babel
存放在 =Library of Babel= 中的代码块可以被任意org文件调用. 

The central repository of code blocks in the “Library of Babel” is housed in an Org mode file located in the ‘contrib’ directory of Org mode.

要想将某个代码块加入到 =Library of Babel= 中,只需要调用函数 ~org-babel-lob-ingest~ 即可,该函数的快捷键为 ~C-c C-v i~
** 支持的语言
*** Python
*** C / C++
*** Lisp
** header arguments
*** 设置header arguments
有多种途径设置header arguments,每种途径设置参数的作用域与优先级都不一样. 一般来说作用域越大的优先级越低
+ 设置全系统的header arguments
  
  设置 ~org-babel-default-header-args~ 变量可以设置全系统的header arguments. 它的默认值为
  #+BEGIN_SRC emacs-lisp
    ((:session . "none")
     (:results . "replace")
     (:exports . "code")
     (:cache . "no")
     (:noweb . "no")
     (:hlines . "no")
     (:tangle . "no"))
  #+END_SRC

+ 为某种语言设置header arguments
  
  通过设置变量 ~org-babel-default-header-args:<lang>~ 的变量值可以为特定语言设置默认header arguments. 这里<lang>替换为代码块的语言名称

+ 为heading设置header arguments
  
  通过设置heading名为 ~header-args~ 和 ~header-args:<lang>~ 属性,可以为某个heading下的所有代码块设置header arguments. 

  这种情况下,无论 ~org-use-property-inheritance~ 的值是什么, 这些属性一定是基础的.

  #+BEGIN_SRC org
    ,#+PROPERTY: header-args:R  :session *R*
    ,#+PROPERTY: header-args    :results silent
  #+END_SRC
  或
  #+BEGIN_SRC org
    ,* outline header
    :PROPERTIES: 
    :header-args: :cache yes
    :END:      
  #+END_SRC

+ 为某代码块设置header arguments
  
  为独立的代码块设置自己的header arguments是最普遍也是最灵活的方式. 方法是在 ~#+BEGIN_SRC~ 行后列上一系列的header arguments及其值即可. 例如
  #+BEGIN_SRC org
      ,#+NAME: factorial
      ,#+BEGIN_SRC haskell :results silent :exports code :var n=0
         fac 0 = 1
         fac n = n * fac (n-1)
      ,#+END_SRC
  #+END_SRC
  
  当然也可以为嵌入式代码块设置header arguments. 例如
  #+BEGIN_SRC org
      src_haskell[:exports both]{fac 5}
  #+END_SRC
  
  代码块的header aguments还可以分拆到多个 ~#+HEADER:~ 或 ~#+HEADERS:~ 行中,这些行放在 ~#+BEGIN_SRC~ 之前 ~#+NAME:~ 之后. 例如
  #+BEGIN_SRC org
      ,#+HEADERS: :var data1=1
      ,#+BEGIN_SRC emacs-lisp :var data2=2
            (message "data1:%S, data2:%S" data1 data2)
      ,#+END_SRC
      
      ,#+RESULTS:
      : data1:1, data2:2
  #+END_SRC
  或
  #+BEGIN_SRC org
    ,#+NAME: named-block
    ,#+HEADER: :var data=2
    ,#+BEGIN_SRC emacs-lisp
      (message "data:%S" data)
    ,#+END_SRC

    ,#+RESULTS: named-block
    : data:2

  #+END_SRC

+ 设置调用代码块时的header arguments
  
  请参见 `执行代码块' 这一节
*** header arguments说明
**** var
  ~:var~ 参数用于传递参数給代码块. 传递参数給代码块的具体方式,依各个语言的不同而改变,具体需要阅读特定语言的文档.

  当为代码块设置 ~:var~ 参数时,总是需要为它设置一个默认值

  参数的值可以是字面量,引用甚至是Emacs Lisp代码. 其中引用可以是带有 ~#+NAME:~, ~#+RESULTS:~ 说明的table或list. ~#+BEGIN_EXAMPLE~ 块,其他代码块以及其他代码块的运行结果.
  *需要注意的是,让引用另外的代码块时,被引用的代码块会被执行,除非被引用的代码块已经被缓存了运行结果*

  ~:var~ 的格式为 ~:var name=assign~ 其中 ~assign~ 可以是

- table的引用

    #+BEGIN_SRC org
      ,#+NAME: example-table
      | 1 |
      | 2 |
      | 3 |
      | 4 |

      ,#+NAME: table-length
      ,#+BEGIN_SRC emacs-lisp :var table=example-table
        (length table)
      ,#+END_SRC

      ,#+RESULTS: table-length
      : 4
    #+END_SRC

  - list的引用

    #+BEGIN_SRC org
      ,#+NAME: example-list
      - simple
        - not
        - nested
      - list
                    
      ,#+BEGIN_SRC emacs-lisp :var x=example-list
        (print x)
      ,#+END_SRC
        
      ,#+RESULTS:
      | simple | list |
    #+END_SRC

  - 不带参数的代码块

    #+BEGIN_SRC org
      ,#+BEGIN_SRC emacs-lisp :var length=table-length()
        (* 2 length)
      ,#+END_SRC

      ,#+RESULTS:
      : 8
    #+END_SRC

  - 带参数的代码块

    #+BEGIN_SRC org
      ,#+NAME: double
      ,#+BEGIN_SRC emacs-lisp :var input=8
        (* 2 input)
      ,#+END_SRC

      ,#+RESULTS: double
      : 16

      ,#+NAME: squared
      ,#+BEGIN_SRC emacs-lisp :var input=double(input=1)
        (* input input)
      ,#+END_SRC

      ,#+RESULTS: squared
      : 4
    #+END_SRC

  - example块

    #+BEGIN_SRC org
      ,#+NAME: literal-example
      ,#+BEGIN_EXAMPLE
        A literal example
        on two lines
      ,#+END_EXAMPLE

      ,#+NAME: read-literal-example
      ,#+BEGIN_SRC emacs-lisp :var x=literal-example
        (concatenate 'string x " for you.")
      ,#+END_SRC

      ,#+RESULTS: read-literal-example
      : A literal example
      :   on two lines for you.

    #+END_SRC

  - 可索引的变量值

    可以通过索引来切取变量的部分值. 索引从0开始,且支持负数,表示从后往前算.

    org支持嵌套索引,其意义类似于多重数组的索引,方法是在索引与索引之间用`,'分隔
    #+BEGIN_SRC org
      ,#+NAME: example-table
      | 1 | a |
      | 2 | b |
      | 3 | c |
      | 4 | d |

      ,#+BEGIN_SRC emacs-lisp :var data=example-table[0,-1]
        data
      ,#+END_SRC

      ,#+RESULTS:
      : a


      ,#+NAME: 3D
      ,#+BEGIN_SRC emacs-lisp
        '(((1  2  3)  (4  5  6)  (7  8  9))
         ((10 11 12) (13 14 15) (16 17 18))
         ((19 20 21) (22 23 24) (25 26 27)))
      ,#+END_SRC

      ,#+BEGIN_SRC emacs-lisp :var data=3D[1,,1]
        data
      ,#+END_SRC

      ,#+RESULTS:
      | 11 | 14 | 17 |

    #+END_SRC
    
    org还支持切片操作,方法是在两个索引之间使用`:'分隔
    #+BEGIN_SRC org
      ,#+NAME: example-table
      | 1 | a |
      | 2 | b |
      | 3 | c |
      | 4 | d |
      | 5 | 3 |

      ,#+BEGIN_SRC emacs-lisp :var data=example-table[1:3]
        data
      ,#+END_SRC

      ,#+RESULTS:
      | 2 | b |
      | 3 | c |
      | 4 | d |
    #+END_SRC
    
    Additionally, an empty index, or the single character ‘*’, are both interpreted to mean the entire range and as such are equivalent to ‘0:-1’
    #+BEGIN_SRC org
      ,#+NAME: example-table
       | 1 | a |
       | 2 | b |
       | 3 | c |
       | 4 | d |

       ,#+BEGIN_SRC emacs-lisp :var data=example-table[,0]
         data
       ,#+END_SRC

       ,#+RESULTS:
       | 1 | 2 | 3 | 4 |

    #+END_SRC

  - Emacs lisp代码

    若变量的值是以 `(',`[',`''或``' 开头的,则它被认为是Emacs lisp代码,其代码的运行返回值才会作为变量真正的值. 例如:
    #+BEGIN_SRC org
      ,#+BEGIN_SRC sh :var filename=(buffer-file-name) :exports both
         wc -w $filename
      ,#+END_SRC
    #+END_SRC
    
    需要注意的是,若是从table或list中读取到的值是以 `(',`[',`'',``'开头的, *也不会被认为是elisp代码*
    #+BEGIN_SRC org
      ,#+NAME: table
       | (a b c) |

       ,#+HEADERS: :var data=table[0,0]
       ,#+BEGIN_SRC perl
         $data
       ,#+END_SRC

       ,#+RESULTS:
       : (a b c)
    #+END_SRC

**** results
  
有四种类型的 ~:result~ 参数. 对于某个代码块来说,每种类型的 ~:reslt~ 参数值只能有一个. 这四种类型分别为:

+ collection: specify how the results should be collected from the code block
    
  - value :: 默认值,表示result为代码块中最后一个语句的返回值

  - output :: result为代码块输出到STDOUT中的结果.

+ type:  specify what type of result the code block will return—which has implications for how they will be processed before insertion into the Org mode buffer

  默认情况下,result会以table或scalar的形式插入到org buffer中

  - table/vector :: result一定以table的形式插入到org buffer中. 即使result的值是一个单值,也会被转换为一个单行单列的表格.

  - list :: result会以org list的形式插入到org buffer中. 即使result的值是一个单值,也会转换为一个只有一个元素的list

  - scalar/verbatim :: 直接插入result的字面量,不做任何转换

  - file :: result的值被认为是一个指向file的路径. result的值会被转换为一个file link再插入到org buffer中

+ format:  specify what type of result the code block will return—which has implications for how they will be inserted into the Org mode buffer

  - raw :: result的值被看成是raw org mode code,会被不做任何转换地插入org buffer中. 若result的值看起来是一个org table,则还会被自动排列整齐.

  - org :: result的值会被包裹进 ~BEGIN_SRC org~ 代码块中(但默认情况下,result的值不会被逗号转义)

  - html :: result的值被认为是一段html代码,因此会被包裹进 ~BEGIN_HTML~ 块中

  - latex :: result的值被认为是一段latex代码,因此会被包裹进 ~BEGIN_LaTex~ 块中

  - code :: result的值被认为是一段可解析的代码,因此会被包裹进代码块中.

  - pp :: result的值被认为是一段可解析的代码,但在包裹进代码块之前会进行格式美化操作(converted to pretty-printed code). 目前只支持Python与Ruby

  - drawer :: result的值会被包裹进一个 ~RESULTS~ drawer中

+ handing: specify how the results of evaluating the code block should be handled.

  - silent :: result会显示在minbuffer中,而不会插入到org buffer中

  - replace :: 默认值. 之前插入的的result会被删除,然后插入新的result结果

  - append :: 新的result会插入到之前result的后面

  - prepend :: 新的result会插入到之前result的前面.
    
    
**** file

~:file~ 参数用于指定将代码块的result保存到哪个文件中. 常与 ~:results file~ 配合使用

代码块执行后,会插入一条 =\[[file:]\]= 的链接到org buffer中.

~:file~ 的参数值可以有两种格式:

+ 一个表示文件路径的字符串
+ 一个由连个字符串组成的list. 其中第一个字符串为保存的文件路径,第二个字符串为链接的描述

**** file-desc

~:file-desc~ 参数常与 ~:file~ 参数配合使用,用于提供链接的描述

**** dir

~:dir~ 参数指定了代码块执行的工作目录. 同时它也常常与 ~:file~ 参数联用用于指明输出文件的相对路径. 默认情况下为org buffer的当前目录. 例如:
#+BEGIN_SRC org
  ,#+BEGIN_SRC R :file myplot.png :dir ~/Work
     matplot(matrix(rnorm(100), 10), type="l")
  ,#+END_SRC
#+END_SRC

~:dir~ 甚至还支持tramp格式的远程路径,这表示代码块是在远程机器上执行的. 例如
#+BEGIN_SRC org
  ,#+BEGIN_SRC R :file plot.png :dir /dand@yakuba.princeton.edu:
  plot(1:10, main=system("hostname", intern=TRUE))
  ,#+END_SRC
#+END_SRC
上面这段代码,会在org buffer中插入这么一条链接 
#+BEGIN_SRC org
  [[file:/scp:dand@yakuba.princeton.edu:/home/dand/plot.png][plot.png]]
#+END_SRC

~:dir~ 参数的实现原理实际上就是更改 ~default-directory~ 的值

**** exports

~:exports~ 参数指定了当将org file导出为HTML或LaTex时,是否包含代码块或其result

+ code :: 默认值,包含代码块的内容
+ results :: 包含代码块的results
+ both :: 包含代码块及其results
+ none :: 都不包括

**** tangle

~:tangle~ 参数指定代码块是否tangle到源代码文件中

+ no :: 默认值,表示不抽取出该代码块中的代码
+ yes :: 抽取出代码块中的代码,存放的文件命为将该org文件后的 =.org= 替换为代码块语言后缀后的名称
+ filename :: 抽取出代码块中的代码,存放在filename中

**** mkdirp

~:mkdirp~ 用于决定当tangled file中的目录不存在时,是否创建该目录

+ yes :: 主动创建不存在的目录
+ no :: 不自动创建不存在的目录

**** comments

默认情况下tangle的过程只会把源代码的内容插入到外部文件中. 使用 ~:comments~ 参数可以让代码在tangle的过程中插入额外的注释信息

+ no :: 默认情况,表示不插入额外的注释
+ link :: 插入额外的注释,一遍从源代码中能够链接回原org文件
+ yes :: 与 =link= 一样,只是为了向后兼容
+ org :: 将一部分org文件中的内容作为注释插入源文件中.The text is picked from the leading context of the tangled code and is limited by the nearest headline or source block as the case may be
+ both :: link + org
+ noweb :: 开启link,同时 wraps expanded noweb references in the code block body in link comments.

**** padline

~:padline~ 参数决定了tangle时,是否在各个代码块之间使用空行间隔

+ yes :: 在各代码块之间使用空行间隔
+ no :: 代码块之间不使用空行间隔

**** no-expand

默认情况下,代码块中的代码需要先经过 ~org-babel-expand-src-block~ 的扩展后再tangle到源文件中. 这一过程涉及到替换 ~:var~ 中定义的参数与 ~noweb~ 引用

~:no-expand~ 则会禁止这项操作

**** session

~:session~ 会让运行代码块的进程保持不关闭. 该功能只能对解析型的语言有效.

默认情况下,进程运行代码块后会自动退出

传递給 ~:session~ 的字符串会作为session的名称.

**** noweb

~:noweb~ 参数控制了在执行,tangle和export代码块时,如何展开noweb引用

+ no :: 默认值,并不展开noweb引用
+ yes :: 在evaluated,tangled和exported前,展开noweb引用
+ tangle :: 只有tangle前,才展开noweb引用
+ no-export :: tangle或evalute前才展开noweb引用
+ strip-export :: evalute或tangle前才会展开noweb引用,且 *export* 前会把noweb引用删除
+ eval :: 只有在evaluate前才展开noweb引用

**** noweb-ref

当扩展"noweb"引用时, 会扩展为任何名字或 ~:noweb-ref~ 参数为引用名字的代码块的内容的和. 例如
#+BEGIN_SRC org
  ,#+BEGIN_SRC sh :tangle yes :noweb yes :shebang #!/bin/sh
    <<fullest-disk>>
  ,#+END_SRC

  ,#+RESULTS:
  : 83% /cygdrive/d

  ,* the mount point of the fullest disk
    :PROPERTIES:
    :noweb-ref: fullest-disk
    :END:

  ,** query all mounted disks
  ,#+BEGIN_SRC sh
    df \
  ,#+END_SRC

  ,** strip the header row
  ,#+BEGIN_SRC sh
    |sed '1d' \
  ,#+END_SRC

  ,** sort by the percent full
  ,#+BEGIN_SRC sh
    |awk '{print $5 " " $6}'|sort -n |tail -1 \
  ,#+END_SRC

  ,** extract the mount point
  ,#+BEGIN_SRC sh
    |awk '{print $2}'
        #+END_SRC
#+END_SRC
当tangle最上面那个代码块时,实际的内容整合了"the mount point of the fullest disk" headline下的所有代码块的内容

**** noweb-sep

~:noweb-sep~ 参数设置了整合各个代码块内容时,各代码块之间使用哪个字符串来分隔,默认为一个空行

**** cache

~:cache~ 参数决定了是否缓存代码块的执行结果. *但当对带有:session参数的代码块无效*

+ no :: 默认,不对代码块的执行结果进行缓存
+ yes :: 对代码块的结果进行缓存.org会将代码块的内容做一个SHA1哈希计算,并在计算前做一次比较,若代码块并未改变则直接使用该缓存值.

下面是一个例子:
#+BEGIN_SRC org
  ,#+NAME: random
  ,#+BEGIN_SRC R :cache yes
  runif(1)
  ,#+END_SRC

  ,#+RESULTS[a2a72cd647ad44515fab62e144796432793d68e1]: random
  0.4659510825295

  ,#+NAME: caller
  ,#+BEGIN_SRC emacs-lisp :var x=random :cache yes
  x
  ,#+END_SRC

  ,#+RESULTS[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller
  0.254227238707244
#+END_SRC

**** sep

The ‘:sep’ header argument can be used to control the delimiter used when writing tabular results out to files external to Org mode. 
This is used either when opening tabular results of a code block by calling the ‘org-open-at-point’ function bound to ‘C-c C-o’ on the code block, or when writing code block results to an external file (see *note file::) header argument.

By default, when ‘:sep’ is not specified output tables are tab delimited.

**** hlines

~:hline~ 参数决定了当使用一个table作为输入时,是否去掉table中的hline. 默认为no,因为table总的hline会被转换为 =hline= symbol. 而这常常是一种干扰.

+ no :: 去除input table中的横线
+ yes :: 保留input table总的横线

下面是一个例子
#+BEGIN_SRC org
  ,#+NAME: many-cols
  | a | b | c |
  |---+---+---|
  | d | e | f |
  |---+---+---|
  | g | h | i |

  ,#+NAME: echo-table-1
  ,#+BEGIN_SRC python :var tab=many-cols
    return tab
  ,#+END_SRC

  ,#+RESULTS: echo-table-1
  | a | b | c |
  | d | e | f |
  | g | h | i |


  ,#+NAME: echo-table-2
  ,#+BEGIN_SRC python :var tab=many-cols :hlines yes
    return tab
  ,#+END_SRC

  ,#+RESULTS: echo-table-2
  | a | b | c |
  |---+---+---|
  | d | e | f |
  |---+---+---|
  | g | h | i |
#+END_SRC

**** colnames

~:colnames~ 参数决定了当使用一个table作为输入时,是否将第一行的值看成是列名而去除.

+ nil :: 默认值. 当第二行是一个hline时,则认为第一行为列名去除掉.
+ no :: 第一行不是列名,不要去除
+ yes :: 第一行作为列名去掉,然后 *再按照nil来处理*

#+BEGIN_SRC org
  ,#+NAME: less-cols
  | a |
  |---|
  | b |
  | c |

  ,#+NAME: echo-table-again
  ,#+BEGIN_SRC python :var tab=less-cols
    return [[val + '*' for val in row] for row in tab]
  ,#+END_SRC

  ,#+RESULTS: echo-table-again
  | b* |
  | c* |

#+END_SRC
  
请注意, *去除列名的动作发生在使用index切片之前*

**** rownames

~:rownames~ 参数决定了当使用一个table作为输入时,是否将第一列的值看成是行名而去除. 默认为no

+ no :: 第一列不是行名
+ yes :: 第一列是行名

#+BEGIN_SRC org
  ,#+NAME: with-rownames
  | one | 1 | 2 | 3 | 4 |  5 |
  | two | 6 | 7 | 8 | 9 | 10 |

  ,#+NAME: echo-table-once-again
  ,#+BEGIN_SRC python :var tab=with-rownames :rownames yes
    return [[val + 10 for val in row] for row in tab]
  ,#+END_SRC

  ,#+RESULTS: echo-table-once-again
  | one | 11 | 12 | 13 | 14 | 15 |
  | two | 16 | 17 | 18 | 19 | 20 |
#+END_SRC
  
请注意, *去除行名的动作发生在使用index切片之前*

**** shebang

~:shebang~ 参数设置shebang行,它在tangling时会将值插入到tangled file中的第一行去,并将其标识为可执行的.

**** tangle-mode

~:tangle-mode~ 参数设置tangled file的权限模式. 它的值会被传递给函数 ~set-file-modes~. 它的值会覆盖 ~:shebang~ 的效果

当多个代码块tangling到同一个file,而各代码块的 ~:tangle-mode~ 不相同的话,其结果是未知的.

**** eval

~:eval~ 参数决定了什么情况下可以执行代码块中的代码. 默认情况下的行为由变量 ~org-confirm-babel-evaluate~ 的值决定

+ never/no :: 任何条件下都不能执行
+ query :: 询问是否执行
+ never-export/no-export :: 在export时不能执行,但可以手工执行
+ query-export :: export时询问是否执行

**** wrap

~:wrap~ 用于决定将代码块的执行结果用什么标识符包裹起来.

任意传递給 ~:wrap~ 的<string>,都会将结果包裹在 ~#+BEGIN_<string>~ 与 ~#+END_<string>~ 中

若只有一个单独的 ~:wrap~,则结果会包裹在 ~#+BEGIN~ 与 ~#+END_RESULTS~ 中

**** post

~:post~ 参数用于决定了得到代码块的result后,该result要传递到哪个代码块中作进一步的处理. 这时,result的值临时绑定到 =*this*= 变量中. 例如
#+BEGIN_SRC org
  ,#+name: attr_wrap
  ,#+begin_src sh :var data="" :var width="\\textwidth" :results output
    echo "#+ATTR_LATEX :width $width"
    echo "$data"
  ,#+end_src

  ,#+header: :file /tmp/it.png
  ,#+begin_src dot :post attr_wrap(width="5cm", data=*this*) :results drawer
    digraph{
            a -> b;
            b -> c;
            c -> a;
    }
  ,#+end_src

  ,#+RESULTS:
  :RESULTS:
  ,#+ATTR_LATEX :width 5cm
  [[file:/tmp/it.png]]
  :END:
#+END_SRC

**** prologue

~:prologue~ 参数决定了在执行代码块中的代码之前,作什么初始化操作

**** epilogue

~:epilogue~ 参数决定了在执行代码块中的代码之后,作什么清理操作

** 处理代码块的运行结果
~:session~ 与 ~:results~ 为 =value= 还是 =output= 共同决定了results的结果

|                 | Non-session      | session          |
|-----------------+------------------+------------------|
| :results value  | 最后语句的返回值 | 最后语句的返回值 |
| :results output | STDOUT的输出     | 解释器的输出结果         |

*当 =:results value= 时,无论是否开启 =:session= ,results都会尽可能的以table的方式展示出来*

*当 =:results value= 时,代码块的内容会被包含在一个函数中,然后执行该函数. 因此对于像Python这样的语言来说,若最后语句不是return,则一定返回None*

*注意 =:results output= 在session与non-session时的不同*
#+BEGIN_SRC org
  ,#+BEGIN_SRC python :results output
   print "hello"
   2
   print "bye"
  ,#+END_SRC

  ,#+RESULTS:
  : hello
  : bye


  ,#+BEGIN_SRC python :results output :session
   print "hello"
   2
   print "bye"
  ,#+END_SRC

  ,#+RESULTS:
  : hello
  : 2
  : bye

#+END_SRC
** Noweb引用语法--org mode下的文学编程
[[http:www.cs.tufts.edu/~nr/noweb/][noweb]] 文学编程系统允许使用类似 ~<<code-block-name>>~ 的格式来引用一段命名的代码块.

当代码块被tangled或执行时,是否将noweb引用扩展为对应代码的行为由代码块的 ~:noweb~ 决定. ~:noweb yes~ 表示代码块执行前,其中的noweb引用会被扩展. 默认值为 ~:noweb no~ 表示不会扩展.

也可以引用命名代码块的执行结果而不是代码内容. 语法是 ~<<code-block-name(optional arguments)>>~ 

*若org文件特别大,则noweb tangle起来会很缓慢,则考虑设置 ~org-babel-use-quick-and-dirty-noweb-expansion~ 为t,但代价是无法正确识别继承的 ~:noweb-ref~ 参数*
** 代码块相关快捷键与函数
在代码块中
| ‘C-c C-c’  | ‘org-babel-execute-src-block’     |
| ‘C-c C-o’  | ‘org-babel-open-src-block-result’ |
| ‘M-<up>’   | ‘org-babel-load-in-session’       |
| ‘M-<down>’ | ‘org-babel-switch-to-session’     |

** 在命令行中调用代码块中的函数
下面这段代码会针对每个传递给它的参数调用 =org-babel-tangle=

#+BEGIN_SRC sh
  #!/bin/sh
  # -*- mode: shell-script -*-
  #
  # tangle files with org-mode
  #
  DIR=`pwd`
  FILES=""

  # wrap each argument in the code required to call tangle on it
  for i in $@; do
      FILES="$FILES \"$i\""
  done

  emacs -Q --batch \
        --eval "(progn
       (add-to-list 'load-path (expand-file-name \"~/src/org/lisp/\"))
       (add-to-list 'load-path (expand-file-name \"~/src/org/contrib/lisp/\" t))
       (require 'org)(require 'org-exp)(require 'ob)(require 'ob-tangle)
       (mapc (lambda (file)
              (find-file (expand-file-name file \"$DIR\"))
              (org-babel-tangle)
              (kill-buffer)) '($FILES)))" 2>&1 |grep tangled

#+END_SRC


* Miscellaneous

* Footnotes
